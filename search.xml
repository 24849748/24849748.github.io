<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【linux 学习笔记】常见基础概念</title>
      <link href="/linux/Linux%E5%B8%B8%E8%A7%81%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"/>
      <url>/linux/Linux%E5%B8%B8%E8%A7%81%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="根文件系统-rootfs"><a href="#根文件系统-rootfs" class="headerlink" title="根文件系统 rootfs"></a>根文件系统 rootfs</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">/<br>├── bin -&gt; usr/bin <span class="hljs-comment"># 存放常用且开机必须用到的可执行文件</span><br>├── boot<br>├── cdrom<br>├── dev <span class="hljs-comment"># 设备文件</span><br>├── etc <span class="hljs-comment"># 配置文件、用户信息、启动脚本</span><br>├── home<br>├── lib -&gt; usr/lib <span class="hljs-comment"># bin sbin 所需的链接库，Linux 的内核模块</span><br>├── lib32 -&gt; usr/lib32<br>├── lib64 -&gt; usr/lib64<br>├── libx32 -&gt; usr/libx32<br>├── lost+found<br>├── media<br>├── mnt <span class="hljs-comment"># 挂载点</span><br>├── opt<br>├── proc<br>├── root<br>├── run<br>├── sbin -&gt; usr/sbin <span class="hljs-comment"># 开机过程中所需的系统级可执行文件</span><br>├── snap<br>├── srv<br>├── swapfile<br>├── sys<br>├── tmp <span class="hljs-comment"># 临时文件</span><br>├── usr<br>└── var<br></code></pre></td></tr></table></figure><h3 id="bin-目录"><a href="#bin-目录" class="headerlink" title="bin 目录"></a>bin 目录</h3><p>该目录下存放所有用户都可以使用的、基本的命令，这些命令在挂接其它文件系统之前就可以使用，所以&#x2F;bin 目录必须和根文件系统在同一个分区中。<br>&#x2F;bin 目录下常用的命令有：cat，chgrp，chmod，cp，ls，sh，kill，mount，umount，mkdir，mknod，test 等，我们在利用 Busybox 制作根文件系统时，在生成的 bin 目录下，可以看到一些可执行的文件，也就是可用的一些命令。</p><h3 id="sbin-目录"><a href="#sbin-目录" class="headerlink" title="sbin 目录"></a>sbin 目录</h3><p>该目录下存放系统命令，即只有管理员能够使用的命令，系统命令还可以存放在&#x2F;usr&#x2F;sbin,&#x2F;usr&#x2F;local&#x2F;sbin 目录下，&#x2F;sbin 目录中存放的是基本的系统命令，它们用于启动系统，修复系统等，与&#x2F;bin 目录相似，在挂接其他文件系统之前就可以使用&#x2F;sbin，所以&#x2F;sbin 目录必须和根文件系统在同一个分区中。<br>&#x2F;sbin 目录下常用的命令有：shutdown，reboot，fdisk，fsck 等，本地用户自己安装的系统命令放在&#x2F;usr&#x2F;local&#x2F;sbin 目录下。</p><h3 id="dev-目录"><a href="#dev-目录" class="headerlink" title="dev 目录"></a>dev 目录</h3><p>该目录下存放的是设备文件，设备文件是 Linux 中特有的文件类型，在 Linux 系统下，以文件的方式访问各种设备，即通过读写某个设备文件操作某个具体硬件。比如通过”dev&#x2F;ttySAC0”文件可以操作串口 0，通过”&#x2F;dev&#x2F;mtdblock1”可以访问 MTD 设备的第 2 个分区。</p><h3 id="etc-目录"><a href="#etc-目录" class="headerlink" title="etc 目录"></a>etc 目录</h3><p>该目录下存放着各种配置文件，对于 PC 上的 Linux 系统，&#x2F;etc 目录下的文件和目录非常多，这些目录文件是可选的，它们依赖于系统中所拥有的应用程序，依赖于这些程序是否需要配置文件。在嵌入式系统中，这些内容可以大为精减。</p><h3 id="lib-目录"><a href="#lib-目录" class="headerlink" title="lib 目录"></a>lib 目录</h3><p>该目录下存放共享库和可加载（驱动程序），共享库用于启动系统。运行根文件系统中的可执行程序，比如：&#x2F;bin &#x2F;sbin 目录下的程序。</p><p>👆 上面 5 个是根文件系统必备的</p><h3 id="home-目录"><a href="#home-目录" class="headerlink" title="home 目录"></a>home 目录</h3><p>用户目录，它是可选的，对于每个普通用户，在&#x2F;home 目录下都有一个以用户名命名的子目录，里面存放用户相关的配置文件。</p><h3 id="root-目录"><a href="#root-目录" class="headerlink" title="root 目录"></a>root 目录</h3><p>根用户的目录，与此对应，普通用户的目录是&#x2F;home 下的某个子目录。</p><h3 id="usr-目录"><a href="#usr-目录" class="headerlink" title="usr 目录"></a>usr 目录</h3><p>&#x2F;usr 目录的内容可以存在另一个分区中，在系统启动后再挂接到根文件系统中的&#x2F;usr 目录下。里面存放的是共享、只读的程序和数据，这表明&#x2F;usr 目录下的内容可以在多个主机间共享，这些主要也符合 FHS 标准的。&#x2F;usr 中的文件应该是只读的，其他主机相关的，可变的文件应该保存在其他目录下，比如&#x2F;var。&#x2F;usr 目录在嵌入式中可以精减。</p><h3 id="var-目录"><a href="#var-目录" class="headerlink" title="var 目录"></a>var 目录</h3><p>与&#x2F;usr 目录相反，&#x2F;var 目录中存放可变的数据，比如 spool 目录 (mail,news)，log 文件，临时文件。</p><h3 id="proc-目录"><a href="#proc-目录" class="headerlink" title="proc 目录"></a>proc 目录</h3><p>这是一个空目录，常作为 proc 文件系统的挂接点，proc 文件系统是个虚拟的文件系统，它没有实际的存储设备，里面的目录，文件都是由内核临时生成的，用来表示系统的运行状态，也可以操作其中的文件控制系统。</p><h3 id="mnt-目录"><a href="#mnt-目录" class="headerlink" title="mnt 目录"></a>mnt 目录</h3><p>用于临时挂载某个文件系统的挂接点，通常是空目录，也可以在里面创建一引起空的子目录，比如&#x2F;mnt&#x2F;cdram &#x2F;mnt&#x2F;hda1 。用来临时挂载光盘、硬盘。</p><h3 id="tmp-目录"><a href="#tmp-目录" class="headerlink" title="tmp 目录"></a>tmp 目录</h3><p>用于存放临时文件，通常是空目录，一些需要生成临时文件的程序用到的&#x2F;tmp 目录下，所以&#x2F;tmp 目录必须存在并可以访问。</p><h2 id="jffs2"><a href="#jffs2" class="headerlink" title="jffs2"></a>jffs2</h2><p>JFFS 文件系统最早是由瑞典 Axis Communications 公司基于 Linux2.0 的内核为嵌入式系统开发的文件系统。JFFS2 是 RedHat 公司基于 JFFS 开发的闪存文件系统，最初是针对 RedHat 公司的嵌入式产品 eCos 开发的嵌入式文件系统，所以 JFFS2 也可以用在 Linux, uCLinux 中。</p><p>Jffs2: 日志闪存文件系统版本 2 (Journalling Flash FileSystem v2)<br>主要用于 NOR 型闪存，基于 MTD 驱动层，特点是：可读写的、支持数据压缩的、基于哈希表的日志型文件系统，并提供了崩溃&#x2F;掉电安全保护，提供“写平衡”支持等。缺点主要是当文件系统已满或接近满时，因为垃圾收集的关系而使 jffs2 的运行速度大大放慢。</p><p>目前 jffs3 正在开发中。关于 jffs 系列文件系统的使用详细文档，可参考 MTD 补丁包中 mtd-jffs-HOWTO.txt。<br>jffsx 不适合用于 NAND 闪存主要是因为 NAND 闪存的容量一般较大，这样导致 jffs 为维护日志节点所占用的内存空间迅速增大，另外，jffsx 文件系统在挂载时需要扫描整个 FLASH 的内容，以找出所有的日志节点，建立文件结构，对于大容量的 NAND 闪存会耗费大量时间。</p><h2 id="Ramdisk"><a href="#Ramdisk" class="headerlink" title="Ramdisk"></a>Ramdisk</h2><p>Ramdisk 是将一部分固定大小的内存当作分区来使用。它并非一个实际的文件系统，而是一种将实际的文件系统装入内存的机制，并且可以作为根文件系统。将一些经常被访问而又不会更改的文件（如只读的根文件系统）通过 Ramdisk 放在内存中，可以明显地提高系统的性能。<br>在 Linux 的启动阶段，initrd 提供了一套机制，可以将内核映像和根文件系统一起载入内存。</p><h2 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h2><p>Linux 文件权限分为三种：</p><ul><li>读 r</li><li>写 w</li><li>执行 x</li></ul><p>权限粒度又分：</p><ul><li>所有者</li><li>群组</li><li>其他组</li></ul><p>使用 <code>ll</code> 命令查看文件对应权限及所属用户和组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">bosco@2004 ~/Project/PX4-Flow (master*) $ ll            <br>总用量 176K<br>drwxrwxr-x 4 bosco bosco 4.0K 11 月  5 19:22 baremetal-configs<br>drwxrwxr-x 2 bosco bosco 4.0K 11 月  5 19:22 cmake<br>-rw-rw-r-- 1 bosco bosco  11K 11 月  5 19:22 CMakeLists.txt<br>-rw-rw-r-- 1 bosco bosco  705 11 月  5 19:22 Flow.sublime-project<br>drwxrwxr-x 2 bosco bosco 4.0K 11 月  5 19:22 Images<br>...<br></code></pre></td></tr></table></figure><p>对于第一串字符，定义如下：<br><img src="https://cdn.jsdelivr.net/gh/24849748/PicBed/ob/20241113172554.png" alt="20241113172554"></p><p>即 文件类型，所有者，群组，其他组，<code>-</code> 表示没有对应权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 修改权限，-R 表示递归修改，xyz 表示权限</span><br><span class="hljs-built_in">chmod</span> -R +x file <span class="hljs-comment"># 给所有用户添加执行权限</span><br><span class="hljs-built_in">chmod</span> -w file <span class="hljs-comment"># 给所有用户去掉写权限</span><br><span class="hljs-built_in">chmod</span> =x file <span class="hljs-comment"># 所有用户只有执行权限</span><br><br><span class="hljs-comment"># 用数字修改</span><br><span class="hljs-comment">## r:4</span><br><span class="hljs-comment">## w:2</span><br><span class="hljs-comment">## x:1</span><br><span class="hljs-comment">## 加起来表示一组权限</span><br><span class="hljs-built_in">chmod</span> 777 file <span class="hljs-comment"># 所有用户都有读写执行权限</span><br></code></pre></td></tr></table></figure><p>常见数字权限表示</p><ul><li>777: 所有用户都有读写执行权限</li><li>755: 所有者有读写执行权限，群组和其他用户只有读和执行权限</li><li>644: 所有者有读写权限，群组和其他用户只有读权限</li><li>600：所有者有读写权限，群组和其他用户没有权限</li></ul><h2 id="IO-重定向"><a href="#IO-重定向" class="headerlink" title="IO 重定向"></a>IO 重定向</h2><ul><li>Linux 命令默认输出是终端</li></ul><p>几个标准的文件描述符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">stdin   0   标准输入流（键盘）<br>stdout  1   标准输出流（终端）<br>stderr  2   标准错误流（终端）<br></code></pre></td></tr></table></figure><p>输出重定向常见形式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">command</span> &gt; file      <span class="hljs-comment"># 将 stdout 重定向到 file</span><br><span class="hljs-built_in">command</span> 1&gt; file     <span class="hljs-comment"># 同上</span><br><span class="hljs-built_in">command</span> &gt;&gt; file     <span class="hljs-comment"># 将 stdout 追加到 file</span><br><span class="hljs-built_in">command</span> 2&gt; file     <span class="hljs-comment"># 将 stderr 重定向到 file</span><br><span class="hljs-built_in">command</span> 2&gt;&gt; file    <span class="hljs-comment"># 将 stderr 追加到 file</span><br><span class="hljs-built_in">command</span> &amp;&gt; file     <span class="hljs-comment"># 将 stdout 和 stderr 都重定向到 file</span><br></code></pre></td></tr></table></figure><p>即 <code>&amp;&gt;</code> &#x3D; <code>1&gt;</code> + <code>2&gt;</code>，例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">ifconfig wlan0 192.168.1.1 up &gt;&gt; /tmp/ap.log 2&gt;&amp;1<br><span class="hljs-comment"># 2&gt;&amp;1 表示将 stderr 重定向到 stdout</span><br><span class="hljs-comment"># 上面等于</span><br>ifconfig wlan0 192.168.1.1 up &gt;&gt; /tmp/ap.log 2&gt;&gt; /tmp/ap.log<br></code></pre></td></tr></table></figure><p>另外，&#x2F;dev&#x2F;null 是一个特殊文件，给它的东西都会丢弃掉<br><code>&amp;&gt; /dev/null</code> 表示丢弃 stdout 和 stderr</p><h2 id="守护进程（Daemon）"><a href="#守护进程（Daemon）" class="headerlink" title="守护进程（Daemon）"></a>守护进程（Daemon）</h2><p>是一种在后台运行的特殊进程，不直接与用户交互<br>特点：</p><ol><li>后台运行</li><li>独立性，脱离父进程控制</li><li>长时间运行</li><li>提供服务，通过 socket、文件接口等</li></ol><p>创建步骤：</p><ol><li>fork()</li><li>setsid() 创建新会话</li><li>chdir(“&#x2F;“) 更改根目录</li><li>unmask(0)，设置文件权限掩码</li><li>reopen() 重定向 <code>stdin</code> <code>stdout</code> <code>stderr</code> 到 <code>/dev/null</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【linux 学习笔记】常见终端命令</title>
      <link href="/linux/Linux%E5%B8%B8%E8%A7%81%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4/"/>
      <url>/linux/Linux%E5%B8%B8%E8%A7%81%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="hexdump"><a href="#hexdump" class="headerlink" title="hexdump"></a>hexdump</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 同时显示 ASCII 和十六进制， 并只显示前 5 个字节</span><br>hexdump -C -n 5 test.bin<br><br><span class="hljs-comment"># 偏移 10 个字节开始显示</span><br>-s 10<br></code></pre></td></tr></table></figure><h2 id="grep-命令"><a href="#grep-命令" class="headerlink" title="grep 命令"></a>grep 命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep <span class="hljs-string">&quot;pattern&quot;</span> file_name<br></code></pre></td></tr></table></figure><ul><li>pattern 可以是正则表达式，也可以是字符串</li></ul><h2 id="sed-命令"><a href="#sed-命令" class="headerlink" title="sed 命令"></a>sed 命令</h2><p>stream editor，流编辑器，用于对文本进行过滤和转换</p><p>可以替换、删除、新增文本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sed -i <span class="hljs-string">&#x27;1i\welcome&#x27;</span> fin.txt<br></code></pre></td></tr></table></figure><ul><li>a ：新增， a 的后面可以接字串，而这些字串会在新的一行出现（目前的下一行）～</li><li>c ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！</li><li>d ：删除，因为是删除啊，所以 d 后面通常不接任何东东；</li><li>i ：插入， i 的后面可以接字串，而这些字串会在新的一行出现（目前的上一行）；</li><li>p ：打印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～</li><li>s ：取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正则表达式！例如 1,20s&#x2F;old&#x2F;new&#x2F;g 就是啦！</li></ul><h2 id="awk-命令"><a href="#awk-命令" class="headerlink" title="awk 命令"></a>awk 命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> file.txt<br></code></pre></td></tr></table></figure><ul><li>file.txt 是需要处理的文件</li><li>awk 会根据空格、制表符等来分割字段</li><li><code>&#39;&#123;print $1&#125;&#39;</code> 是模板，$1 表示第一个字段，$0 表示当前整行</li></ul><p>举例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello world&quot;</span> | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span><br>hello<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello world&quot;</span> | awk <span class="hljs-string">&#x27;&#123;print $0&#125;&#x27;</span><br>hello world<br><br><span class="hljs-comment"># 指定分隔符</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello world; code bug&quot;</span> | awk -F<span class="hljs-string">&#x27;;&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span><br> code bug<br></code></pre></td></tr></table></figure><h2 id="top-命令"><a href="#top-命令" class="headerlink" title="top 命令"></a>top 命令</h2><p>查看进程系统占用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">top<br><span class="hljs-comment"># or</span><br>top -p &lt;pid&gt;<br></code></pre></td></tr></table></figure><ul><li>M 按内存占用排序</li><li>P 按 CPU 占用排序</li></ul><h2 id="ps-命令"><a href="#ps-命令" class="headerlink" title="ps 命令"></a>ps 命令</h2><p>用于查看进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps aus | grep &lt;进程名&gt;<br></code></pre></td></tr></table></figure><h2 id="kill-命令"><a href="#kill-命令" class="headerlink" title="kill 命令"></a>kill 命令</h2><p>用于杀掉进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">kill</span> &lt;pid&gt;<br><br><span class="hljs-comment"># -9 强制杀掉进程</span><br><span class="hljs-built_in">kill</span> -9 &lt;pid&gt;<br></code></pre></td></tr></table></figure><h2 id="du-命令"><a href="#du-命令" class="headerlink" title="du 命令"></a>du 命令</h2><p>用于查看文件夹大小<br><a href="https://blog.csdn.net/duan19920101/article/details/104823301">Linux 查看文件或文件夹大小：du 命令</a><br><a href="https://blog.csdn.net/ouyang_peng/article/details/10414499">Linux 中查看各文件夹大小命令 du -h –max-depth&#x3D;1</a></p><p>使用 <code>ls -l</code> 命令，文件夹大小都只显示 4KB</p><p>使用 <code>du</code> 命令查看目录或文件实际大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">-h, --human-readable<br>    以 K，M，G 为单位，显示文件的大小<br><br>-s, --summarize<br>    只显示总计的文件大小<br><br>-S, --separate-dirs<br>    显示时并不含其子文件夹的大小<br><br>-d, --max-depth=N<br>    显示子文件夹的深度（层级）<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">du</span> -sh [<span class="hljs-built_in">dir</span>/file]<br></code></pre></td></tr></table></figure><h2 id="tar-命令"><a href="#tar-命令" class="headerlink" title="tar 命令"></a>tar 命令</h2><p>用于解压缩，通常也可以不加 -</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 解压</span><br>tar -zxvf xxx.tar.gz -C <span class="hljs-built_in">dir</span>/<br>tar -zxvf xxx.tar.bz2 -C <span class="hljs-built_in">dir</span>/<br>tar -xvf xxx.tar.xz -C <span class="hljs-built_in">dir</span>/<br>unzip xxx.zip<br><br><span class="hljs-comment"># 压缩</span><br>tar -zcvf xxx.tar.gz <span class="hljs-built_in">dir</span>/<br>tar -jcvf xxx.tar.bz2 <span class="hljs-built_in">dir</span>/<br>tar -Jcvf xxx.tar.xz <span class="hljs-built_in">dir</span>/<br>zip -r xxx.zip <span class="hljs-built_in">dir</span>/<br></code></pre></td></tr></table></figure><h2 id="file-命令"><a href="#file-命令" class="headerlink" title="file 命令"></a>file 命令</h2><p>用于查看文件类型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">file xxx<br></code></pre></td></tr></table></figure><h2 id="head-tail-命令"><a href="#head-tail-命令" class="headerlink" title="head&#x2F;tail 命令"></a>head&#x2F;tail 命令</h2><p>用于查看文件内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看文件前 10 行</span><br><span class="hljs-built_in">head</span> -n 10 xxx<br><br><span class="hljs-comment"># 查看文件后 10 行</span><br><span class="hljs-built_in">tail</span> -n 10 xxx<br><br><span class="hljs-comment"># 查看文件第 10 行到第 20 行</span><br></code></pre></td></tr></table></figure><h2 id="tree-命令"><a href="#tree-命令" class="headerlink" title="tree 命令"></a>tree 命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 打印根目录</span><br>tree -L 1 /<br></code></pre></td></tr></table></figure><h2 id="ln-命令"><a href="#ln-命令" class="headerlink" title="ln 命令"></a>ln 命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># src 为源文件，dst 为要生成的软连接文件</span><br><span class="hljs-built_in">ln</span> -s src dst<br></code></pre></td></tr></table></figure><blockquote><p><strong>如果想要生成目录（而非文件）的软连接，必须用绝对路径。</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【linux 学习笔记】POSIX 互斥锁</title>
      <link href="/linux/D8-POSIX%E4%BA%92%E6%96%A5%E9%94%81/"/>
      <url>/linux/D8-POSIX%E4%BA%92%E6%96%A5%E9%94%81/</url>
      
        <content type="html"><![CDATA[<ul><li>锁机制是 Linux 内核精髓所在</li><li>Linux 锁种类很多：互斥锁、文件锁、读写锁等</li><li>信号量也是一种锁</li><li>互斥锁只有<strong>开锁</strong>和<strong>闭锁</strong>两种状态</li></ul><p>只有一个线程能获取互斥锁，当持有互斥锁的线程再次获得该锁而不被阻塞，那这个锁就是<strong>递归锁</strong>，也叫<strong>可重入锁</strong>。</p><p>死锁：两个线程互相锁住对方，或者自己把自己阻塞住</p><p>要避免死锁，最好遵循：</p><ol><li>对共享资源操作前一定要获取锁</li><li>完成操作后一定要释放锁</li><li>占用锁的时间尽可能短</li><li>有多个锁时，获取时是 ABC，释放时也应该是 ABC</li></ol><p>互斥锁能降低信号量存在的优先级翻转问题带来的影响</p><h2 id="互斥锁使用"><a href="#互斥锁使用" class="headerlink" title="互斥锁使用"></a>互斥锁使用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 静态初始化</span><br><span class="hljs-type">pthread_mutex_t</span> mutex = PTHREAD_MUTEX_INITIALIZER;<br><br><span class="hljs-comment">// 动态初始化，mutexattr = NULL 使用默认属性</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutex_init</span><span class="hljs-params">(<span class="hljs-type">pthread_mutex_t</span> *mutex, <span class="hljs-type">const</span> <span class="hljs-type">pthread_mutexattr_t</span> *mutexattr)</span>;<br><br><span class="hljs-comment">// 销毁</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutex_destroy</span><span class="hljs-params">(<span class="hljs-type">pthread_mutex_t</span> *mutex)</span>;<br><br><span class="hljs-comment">// 上锁，阻塞地取得所有权</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutex_lock</span><span class="hljs-params">(<span class="hljs-type">pthread_mutex_t</span> *mutex)</span>;<br><br><span class="hljs-comment">// 非阻塞上锁</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutex_trylock</span><span class="hljs-params">(<span class="hljs-type">pthread_mutex_t</span> *mutex)</span>;<br><br><span class="hljs-comment">// 解锁</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutex_unlock</span><span class="hljs-params">(<span class="hljs-type">pthread_mutex_t</span> *mutex)</span>;<br></code></pre></td></tr></table></figure><p>代码示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;pt.h&quot;</span></span><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">1. 即使 sleep，其他线程也不会得到执行</span><br><span class="hljs-comment">2. 期待结果应该是 3 个线程打印是连续的</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> THREAD_NUM 3</span><br><span class="hljs-type">pthread_mutex_t</span> mutex;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> *<span class="hljs-title function_">thread_mutex_test</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span><br>&#123;<br>    <span class="hljs-type">int</span> idx = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>)arg;<br><br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 上锁</span><br>    ret = pthread_mutex_lock(&amp;mutex);<br>    PT_LOGI(<span class="hljs-string">&quot;thread[%d] mutex lock\n&quot;</span>, idx);<br>    <span class="hljs-keyword">if</span> (ret != <span class="hljs-number">0</span>)<br>    &#123;<br>        PT_LOGE(<span class="hljs-string">&quot;thread[%d] lock failed\n&quot;</span>, idx);<br>        pthread_mutex_unlock(&amp;mutex);<br>        pthread_exit(<span class="hljs-literal">NULL</span>);<br>    &#125;<br><br>    PT_LOGI(<span class="hljs-string">&quot;thread[%d] running...\n&quot;</span>, idx);<br>    sleep(<span class="hljs-number">2</span>);<br><br>    PT_LOGI(<span class="hljs-string">&quot;thread[%d] mutex unlock\n&quot;</span>, idx);<br><br>    <span class="hljs-comment">// 解锁</span><br>    pthread_mutex_unlock(&amp;mutex);<br><br>    pthread_exit(<span class="hljs-literal">NULL</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    <span class="hljs-type">pthread_t</span> tid[THREAD_NUM];<br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 初始化互斥锁</span><br>    pthread_mutex_init(&amp;mutex, <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; THREAD_NUM; i++)<br>    &#123;<br>        ret = pthread_create(&amp;tid[i], <span class="hljs-literal">NULL</span>, (<span class="hljs-type">void</span> *)thread_mutex_test, (<span class="hljs-type">void</span> *)(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>)i);<br>        <span class="hljs-keyword">if</span> (ret != <span class="hljs-number">0</span>)<br>        &#123;<br>            PT_LOGE(<span class="hljs-string">&quot;thread[%d] create failed\n&quot;</span>, i);<br>            <span class="hljs-built_in">exit</span>(ret);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; THREAD_NUM; i++)<br>    &#123;<br>        pthread_join(tid[i], <span class="hljs-literal">NULL</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 销毁互斥锁</span><br>    pthread_mutex_destroy(&amp;mutex);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【linux 学习笔记】共享内存</title>
      <link href="/linux/D5-%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/"/>
      <url>/linux/D5-%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/24849748/PicBed/ob/20241030103627.png" alt="20241030103627"></p><ul><li>共享内存就允许多个不相关的进程访问同一个逻辑内存</li><li>是效率最高的一种 IPC 通信机制</li><li>属于临界资源，一般不能单独使用，而要配合信号量、互斥锁等协调机制</li><li>使用不需要调用接口，直接访问内存</li></ul><h2 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ipc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/shm.h&gt;</span></span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @brief 把共享内存区对象 映射到 调用进程的地址空间</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * @param[in] key </span><br><span class="hljs-comment"> * @param[in] size 所有内存分配操作都是以页为单位</span><br><span class="hljs-comment"> * @param[in] shmflg 操作 IPC_xx | 权限</span><br><span class="hljs-comment"> * @return int 成功返回内存 ID shmid</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">shmget</span><span class="hljs-params">(<span class="hljs-type">key_t</span> key, <span class="hljs-type">size_t</span> size, <span class="hljs-type">int</span> shmflg)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @brief 映射函数</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * @param[in] shmid shmget() 返回的 id</span><br><span class="hljs-comment"> * @param[in] shmaddr !NULL 时系统根据该值选择合适的地址；为 NULL 时系统自动选择</span><br><span class="hljs-comment"> * @param[in] shmflg SHM_RDONLY，SHM_REMAP，NULLSHM</span><br><span class="hljs-comment"> * @return </span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">shmat</span><span class="hljs-params">(<span class="hljs-type">int</span> shmid, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *shmaddr, <span class="hljs-type">int</span> shmflg)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @brief 解除映射</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * @param[in] shmaddr 映射的共享内存起始地址，shmat() 返回的地址</span><br><span class="hljs-comment"> * @return int 成功返回 0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">shmdt</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *shmaddr)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @brief 控制函数</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * @param[in] shmid shmget() 返回的 id</span><br><span class="hljs-comment"> * @param[in] cmd </span><br><span class="hljs-comment"> * @param[in] buf </span><br><span class="hljs-comment"> * @return int 成功返回 0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">shmctl</span><span class="hljs-params">(<span class="hljs-type">int</span> shmid, <span class="hljs-type">int</span> cmd, <span class="hljs-keyword">struct</span> shmid_ds *buf)</span>;<br></code></pre></td></tr></table></figure><p>shmctl 函数 cmd 取值定义：</p><ul><li>IPC_STAT：获取属性信息，放置到 buf 中。</li><li>IPC_SET：设置属性信息为 buf 指向的内容。</li><li>IPC_RMID：删除这该共享内存。</li><li>IPC_INFO：获得关于共享内存的系统限制值信息。</li><li>SHM_INFO：获得系统为共享内存消耗的资源信息。</li><li>SHM_STAT：与 IPC_STAT 具有相同的功能，但 shmid 为该 SHM 在内核中记录所有 SHM 信息的数组的下标， 因此通过迭代所有的下标可以获得系统中所有 SHM 的相关信息。</li><li>SHM_LOCK：禁止系统将该 SHM 交换至 swap 分区。</li><li>SHM_UNLOCK：允许系统将该 SHM 交换至 swap 分。</li></ul><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><h3 id="写"><a href="#写" class="headerlink" title="写"></a>写</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ipc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/shm.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/sem.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;sem.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    <span class="hljs-type">void</span> *shm = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> semid;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">shared_use_st</span> *<span class="hljs-title">shared</span> =</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">char</span> buffer[<span class="hljs-number">100</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br>    <span class="hljs-comment">// 创建获取共享内存</span><br>    <span class="hljs-type">int</span> shmid = shmget((<span class="hljs-type">key_t</span>)<span class="hljs-number">1212</span>, <span class="hljs-number">4096</span>, <span class="hljs-number">0666</span> | IPC_CREAT);<br>    <span class="hljs-keyword">if</span> (shmid == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;shmget\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 连接到当前进程地址空间</span><br>    shm = shmat(shmid, (<span class="hljs-type">void</span> *)<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (shm == (<span class="hljs-type">void</span> *)<span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;shmat\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    PT_LOGI(<span class="hljs-string">&quot;shmat at %p\n&quot;</span>, shm);<br><br>    <span class="hljs-comment">// 信号量</span><br>    semid = semget((<span class="hljs-type">key_t</span>)<span class="hljs-number">2222</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0666</span> | IPC_CREAT);<br>    <span class="hljs-keyword">if</span> (semid == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;semget\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-comment">// 直接写内存</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter some message to send:&quot;</span>);<br>        fgets(buffer, <span class="hljs-keyword">sizeof</span>(buffer), <span class="hljs-built_in">stdin</span>);<br>        <span class="hljs-built_in">strncpy</span>(shm, buffer, <span class="hljs-number">100</span>);<br><br>        <span class="hljs-comment">// 释放信号量</span><br>        <span class="hljs-comment">// sem_v()</span><br><br>        <span class="hljs-comment">// 退出程序</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strncmp</span>(buffer, <span class="hljs-string">&quot;q&quot;</span>, <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 从当前进程分离共享内存</span><br>    <span class="hljs-keyword">if</span> (shmdt(shm) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;shmdt\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    sleep(<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="读"><a href="#读" class="headerlink" title="读"></a>读</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ipc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/msg.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MSG_MAX_LEN (512)</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">long</span> msg_type;<br>    <span class="hljs-type">char</span> msg_ctx[MSG_MAX_LEN];<br>&#125; <span class="hljs-type">msg_t</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    <span class="hljs-type">int</span> qid;<br>    <span class="hljs-type">msg_t</span> msg;<br><br>    qid = msgget((<span class="hljs-type">key_t</span>)<span class="hljs-number">1234</span>, (IPC_CREAT | <span class="hljs-number">0666</span>));<br>    <span class="hljs-keyword">if</span> (qid == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;msgget\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;open queue %d\n&quot;</span>, qid);<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter some message to send:&quot;</span>);<br>        fgets(msg.msg_ctx, MSG_MAX_LEN, <span class="hljs-built_in">stdin</span>);<br>        msg.msg_type = getpid();<br><br>        <span class="hljs-keyword">if</span> (msgsnd(qid, &amp;msg, <span class="hljs-built_in">strlen</span>(msg.msg_ctx), <span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;msgsnd error\n&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;msgsnd ok\n&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> ((<span class="hljs-built_in">strncmp</span>(msg.msg_ctx, <span class="hljs-string">&quot;q&quot;</span>, <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>) <br>            || (<span class="hljs-built_in">strncmp</span>(msg.msg_ctx, <span class="hljs-string">&quot;quit&quot;</span>, <span class="hljs-number">4</span>) == <span class="hljs-number">0</span>))<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;quit&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【linux 学习笔记】POSIX 信号量</title>
      <link href="/linux/D7-POSIX%E4%BF%A1%E5%8F%B7%E9%87%8F/"/>
      <url>/linux/D7-POSIX%E4%BF%A1%E5%8F%B7%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<ul><li>可实现进程&#x2F;线程之间同步或临界资源的<strong>互斥</strong>访问</li><li>POSIX 信号量分为有名信号量和无名信号量<ul><li>无名直接保存在内存中，因此只能用于同一进程的线程间</li><li>有名要求创建一个文件，常用于进程间</li></ul></li></ul><p><strong>临界资源</strong>：同一时刻只允许有限个进程&#x2F;线程读写的资源，通常包括硬件资源（cpu、内存、外设等）、软件资源（共享代码段、变量等）</p><p>信号量中存在一个非负整数，所有获取它的进程&#x2F;线程会使该数减一，所有尝试获取信号量的进程&#x2F;线程都将处于阻塞</p><p>信号量的操作分为两个：</p><ul><li>P 操作：<ol><li>若资源可用（信号量大于 0），则占用资源（信号量减 1，进入临界区）</li><li>若资源不可用（信号量&#x3D;&#x3D;0），则阻塞直到被系统分配</li></ol></li><li>V 操作<ol><li>如果该信号量的等待队列有别的进程&#x2F;线程在等，那就唤醒一个阻塞的进程&#x2F;线程。</li><li>如果没有进程&#x2F;线程，则释放资源（信号量加 1）</li></ol></li></ul><blockquote><p>总结：P 操作是我想申请一个停车位，V 操作是我要离开停车位</p></blockquote><p>执行顺序：</p><ol><li>P 操作</li><li>临界区操作</li><li>V 操作</li></ol><h2 id="POSIX-信号量使用"><a href="#POSIX-信号量使用" class="headerlink" title="POSIX 信号量使用"></a>POSIX 信号量使用</h2><h3 id="有名信号量"><a href="#有名信号量" class="headerlink" title="有名信号量"></a>有名信号量</h3><p>有名信号量是一个文件，创建出来后在 <code>/dev/shm</code> 路径下有个 <code>sem.</code> 前缀的文件，完整名字是 <code>sem.name</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">bosco@2004 ~/Project/code $ <span class="hljs-built_in">ls</span> -l /dev/shm<br>总用量 4<br>-rw-r--r-- 1 bosco bosco 32 11 月 10 15:30 sem.my_sem<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><br><span class="hljs-comment">// 如果信号量在，mode value 被忽略</span><br><span class="hljs-type">sem_t</span> *<span class="hljs-title function_">sem_open</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name, <span class="hljs-type">int</span> oflag, <span class="hljs-type">mode_t</span> mode, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> value)</span>;<br><br><span class="hljs-comment">// P 操作</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sem_wait</span><span class="hljs-params">(<span class="hljs-type">sem_t</span> *sem)</span>;<br><br><span class="hljs-comment">// 非阻塞的 P 操作</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sem_trywait</span><span class="hljs-params">(<span class="hljs-type">sem_t</span> *sem)</span>;<br><br><span class="hljs-comment">// V 操作</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sem_post</span><span class="hljs-params">(<span class="hljs-type">sem_t</span> *sem)</span>;<br><br><span class="hljs-comment">// 关闭，仅表示当前进程/线程不再使用，不会删除信号量</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sem_close</span><span class="hljs-params">(<span class="hljs-type">sem_t</span> *sem)</span>;<br><br><span class="hljs-comment">// 主动删除操作</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sem_unlink</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span>;<br></code></pre></td></tr></table></figure><p>代码示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;pt.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    <span class="hljs-type">int</span> pid;<br>    <span class="hljs-type">sem_t</span> *sem;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *sem_name = <span class="hljs-string">&quot;my_sem&quot;</span>;<br><br>    pid = fork();<br><br>    <span class="hljs-keyword">if</span> (pid &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        PT_LOGE(<span class="hljs-string">&quot;fork error\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>)<br>    &#123;<br>        sem = sem_open(sem_name, O_CREAT, <span class="hljs-number">0644</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (sem == SEM_FAILED)<br>        &#123;<br>            PT_LOGE(<span class="hljs-string">&quot;create semaphone error\n&quot;</span>);<br>            sem_unlink(sem_name);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// P 操作</span><br>        sem_wait(sem);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>        &#123;<br>            PT_LOGI(<span class="hljs-string">&quot;child running: %d\n&quot;</span>, i);<br>            sleep(<span class="hljs-number">1</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// V 操作</span><br>        sem_post(sem);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        sem = sem_open(sem_name, O_CREAT, <span class="hljs-number">0644</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (sem == SEM_FAILED)<br>        &#123;<br>            PT_LOGE(<span class="hljs-string">&quot;create semaphone error\n&quot;</span>);<br>            sem_unlink(sem_name);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// P 操作</span><br>        sem_wait(sem);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>        &#123;<br>            PT_LOGI(<span class="hljs-string">&quot;parent running: %d\n&quot;</span>, i);<br>            sleep(<span class="hljs-number">1</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// V 操作</span><br>        sem_post(sem);<br><br>        <span class="hljs-comment">// 等子进程结束</span><br>        wait(<span class="hljs-literal">NULL</span>);<br>        <span class="hljs-comment">// 关闭信号量</span><br>        sem_close(sem);<br>        <span class="hljs-comment">// 删除信号量</span><br>        sem_unlink(sem_name);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="无名信号量"><a href="#无名信号量" class="headerlink" title="无名信号量"></a>无名信号量</h3><ul><li>仅在同一个进程内使用</li><li>fork 出来的子进程不会继承信号量</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 不能多次 init；pshared 只能取 0</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sem_init</span><span class="hljs-params">(<span class="hljs-type">sem_t</span> *sem， <span class="hljs-type">int</span> pshared， <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> value)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">sem_wait</span><span class="hljs-params">(<span class="hljs-type">sem_t</span> *sem)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">sem_trywait</span><span class="hljs-params">(<span class="hljs-type">sem_t</span> *sem)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">sem_post</span><span class="hljs-params">(<span class="hljs-type">sem_t</span> *sem)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">sem_destroy</span><span class="hljs-params">(<span class="hljs-type">sem_t</span> *sem)</span>;<br></code></pre></td></tr></table></figure><p>代码示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;pt.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> THREAD_NUM 3</span><br><br><span class="hljs-type">sem_t</span> sem[THREAD_NUM];<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> *<span class="hljs-title function_">thread_sem_unname</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span><br>&#123;<br>    <span class="hljs-type">int</span> idx = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>)arg;<br><br>    <span class="hljs-comment">// P 操作</span><br>    PT_LOGI(<span class="hljs-string">&quot;P sem[%d]\n&quot;</span>, idx);<br>    sem_wait(&amp;sem[idx]);<br><br>    PT_LOGI(<span class="hljs-string">&quot;thread[%d] start\n&quot;</span>, idx);<br><br>    <span class="hljs-comment">// 执行 5 次打印</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>    &#123;<br>        PT_LOGI(<span class="hljs-string">&quot;thread[%d] running... %d\n&quot;</span>, idx, i);<br>        sleep(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    PT_LOGI(<span class="hljs-string">&quot;thread[%d] end\n&quot;</span>, idx);<br><br>    <span class="hljs-comment">// 接触进程</span><br>    pthread_exit(<span class="hljs-literal">NULL</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    <span class="hljs-type">pthread_t</span> tid[THREAD_NUM];<br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; THREAD_NUM; i++)<br>    &#123;<br>        <span class="hljs-comment">// 创建无名信号量</span><br>        sem_init(&amp;sem[i], <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><br>        <span class="hljs-comment">// 创线程，并传入 index</span><br>        ret = pthread_create(&amp;tid[i], <span class="hljs-literal">NULL</span>, thread_sem_unname, (<span class="hljs-type">void</span> *)(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>)i);<br>        <span class="hljs-keyword">if</span> (ret != <span class="hljs-number">0</span>)<br>        &#123;<br>            PT_LOGE(<span class="hljs-string">&quot;thread[%d] create failed\n&quot;</span>, i);<br>            <span class="hljs-built_in">exit</span>(ret);<br>        &#125;<br>    &#125;<br><br>    PT_LOGI(<span class="hljs-string">&quot;thread create done! Wait finish...\n&quot;</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; THREAD_NUM; i++)<br>    &#123;<br>        <span class="hljs-comment">// V 操作</span><br>        PT_LOGI(<span class="hljs-string">&quot;V sem[%d]\n&quot;</span>, i);<br>        sem_post(&amp;sem[i]);<br>        ret = pthread_join(tid[i], <span class="hljs-literal">NULL</span>);<br>        <span class="hljs-keyword">if</span> (!ret)<br>        &#123;<br>            PT_LOGI(<span class="hljs-string">&quot;thread[%d] join done\n&quot;</span>, i);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            PT_LOGE(<span class="hljs-string">&quot;thread[%d] join failed\n&quot;</span>, i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 删除信号量</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; THREAD_NUM; i++)<br>    &#123;<br>        sem_destroy(&amp;sem[i]);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【linux 学习笔记】线程</title>
      <link href="/linux/D6-%E7%BA%BF%E7%A8%8B/"/>
      <url>/linux/D6-%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<ul><li>进程是<strong>资源管理</strong>的最小单位</li><li>线程是<strong>程序执行</strong>的最小单位</li><li>线程是操作系统能够调度和执行的基本单位，在 Linux 中也称轻量级进程</li><li>进程管理着资源（比如 cpu、内存、文件等等），线程分配到某个 cpu 上执行</li><li>一个进程至少需要一个线程作为它的指令执行体</li><li>进程崩了线程也崩，线程崩了进程不一定崩</li></ul><h2 id="为什么分进程和线程"><a href="#为什么分进程和线程" class="headerlink" title="为什么分进程和线程"></a>为什么分进程和线程</h2><p>每个进程都有自己的数据段、代码段、堆栈段，那么在进程切换的时候就会产生上下文切换等这些开销<br>在进程切换上下文时，需要重新映射虚拟地址空间、进出 OS 内核、寄存器切换，可能还会干扰处理器的缓存机制<br>而线程切换只需要切换线程的寄存器，不需要切换进程的虚拟地址空间，因此开销小很多</p><p><img src="https://cdn.jsdelivr.net/gh/24849748/PicBed/ob/20241030111347.png" alt="20241030111347"></p><h2 id="线程前验知识"><a href="#线程前验知识" class="headerlink" title="线程前验知识"></a>线程前验知识</h2><p>POSIX 标准：（Portable Operating System Interface，可移植操作系统接口）<br>POSIX 是 IEEE 为要在各种 UNIX 操作系统上运行软件，而定义 API 接口的一系列互相关联的标准的总称<br>最后一个字母 X 表明其对 Unix API 的传承。</p><h2 id="线程使用"><a href="#线程使用" class="headerlink" title="线程使用"></a>线程使用</h2><p>原型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_create</span><span class="hljs-params">(<span class="hljs-type">pthread_t</span> *thread, <span class="hljs-type">const</span> <span class="hljs-type">pthread_attr_t</span> *attr, <span class="hljs-type">void</span> *(*start_routine) (<span class="hljs-type">void</span> *), <span class="hljs-type">void</span> *arg)</span>;<br><br><span class="hljs-comment">// 阻塞等待某个线程终止，可以获得该线程的终止状态，并收回所占的资源，对线程返回状态不感兴趣，可以置第二个参数为 NULL</span><br><span class="hljs-comment">// 类似进程的 wait()</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_join</span><span class="hljs-params">(<span class="hljs-type">pthread_t</span> tid, <span class="hljs-type">void</span> **rval_ptr)</span>;<br><br><span class="hljs-comment">// 置为分离状态后，操作系统会自动回收线程资源，不需要再调用 pthread_join() 等待结束</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_detach</span><span class="hljs-params">(<span class="hljs-type">pthread_t</span> tid)</span>;<br><br><span class="hljs-comment">// 线程显示退出，类似进程的 exit()</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">pthread_exit</span><span class="hljs-params">(<span class="hljs-type">void</span> *retval)</span>;<br></code></pre></td></tr></table></figure><h2 id="线程调度策略"><a href="#线程调度策略" class="headerlink" title="线程调度策略"></a>线程调度策略</h2><p>POSIX 标准定义了三种调度策略：</p><ol><li>SCHED_OTHER，分时调度策略，线程的默认策略</li><li>SCHED_FIFO，先进先出策略，先入队的线程优先执行，线程会一直占用 CPU，直到有更高优先级任务到达或自己主动放弃 CPU 使用权</li><li>SCHED_RR，时间片轮询调度，与 FIFO 不同的是每个线程都有执行时间配额，但时间片用完系统就会重新分配时间，并切换线程，保证了相同优先级的 RR 线程的调度公平</li></ol><h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><ul><li>优先级数值越小，线程优先级越高</li><li>新线程的优先级为默认为 0</li><li>当线程的调度策略为 SCHED_OTHER 时，不允许修改线程优先级，仅当调度策略为实时（即 SCHED_RR 或 SCHED_FIFO）时才有效， 并可以在运行时通过 pthread_setschedparam() 函数来改变，默认为 0</li></ul><h2 id="线程栈"><a href="#线程栈" class="headerlink" title="线程栈"></a>线程栈</h2><ul><li>默认线程栈大小为 1M</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_attr_setstacksize</span><span class="hljs-params">(<span class="hljs-type">pthread_attr_t</span> *attr, <span class="hljs-type">size_t</span> stacksize)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_attr_getstacksize</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">pthread_attr_t</span> *attr, <span class="hljs-type">size_t</span> *stacksize)</span>;<br></code></pre></td></tr></table></figure><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> *<span class="hljs-title function_">thread_test</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span><br>&#123;<br>    <span class="hljs-comment">// 64 位操作系统，sizeof(void*) == 8, sizeof(int) == 4</span><br>    <span class="hljs-type">int</span> _value = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>)arg;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;thread_test start!\n&quot;</span>);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;arg is %d\n&quot;</span>, _value);<br><br>    sleep(<span class="hljs-number">5</span>);<br><br>    pthread_exit(<span class="hljs-literal">NULL</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">pthread_t</span> tid;<br>    <span class="hljs-type">int</span> value = <span class="hljs-number">123</span>;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br><br>    ret = pthread_create(&amp;tid, <span class="hljs-literal">NULL</span>, thread_test, (<span class="hljs-type">void</span> *)(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>)value); <br>    <span class="hljs-keyword">if</span> (ret != <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;thread create failed\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;thread create success\n&quot;</span>);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;wait thread exit...\n&quot;</span>);<br><br>    ret = pthread_join(tid, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">if</span> (ret != <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;thread exit failed\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;thread exit done\n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【linux 学习笔记】消息队列</title>
      <link href="/linux/D4-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
      <url>/linux/D4-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p><strong>消息队列</strong>、<strong>共享内存</strong> 和 <strong>信号量</strong> 被统称为 system-V IPC</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 查看系统当前的 ipc 对象</span><br>ipcs -q/m/s<br><br><span class="hljs-comment">## 输出</span><br>--------- 消息队列 -----------<br>键        msqid      拥有者  权限     已用字节数 消息      <br><br>------------ 共享内存段 --------------<br>键        shmid      拥有者  权限     字节     连接数  状态      <br><br>--------- 信号量数组 -----------<br>键        semid      拥有者  权限     nsems    <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 删除</span><br>ipcrm -q/m/s [<span class="hljs-built_in">id</span>]<br></code></pre></td></tr></table></figure><ul><li>消息队列提供了一种从一个进程向另一个进程发送一个数据块的方法。</li><li>每个数据块都被认为含有一个类型，接收进程可以独立地接收含有不同类型的数据结构。</li><li>可以通过发送消息来避免命名管道的同步和阻塞问题。</li></ul><h2 id="与信号管道对比"><a href="#与信号管道对比" class="headerlink" title="与信号管道对比"></a>与信号管道对比</h2><p>与信号对比：</p><ul><li>信号承载信息量少，消息队列可以承载大量自定义数据</li></ul><p>与管道对比：</p><ul><li>与命名管道类似</li><li>消息队列也可以独立于发送和接收进程而存在，在进程终止时，消息队列及其内容并不会被删除</li><li>管道只能承载无格式字节流，消息队列提供有格式的字节流</li><li>消息队列可以实现消息的随机查询，消息不一定要以先进先出的顺序接收，也可以按消息的类型接收</li></ul><h2 id="消息队列使用"><a href="#消息队列使用" class="headerlink" title="消息队列使用"></a>消息队列使用</h2><p>函数原型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ipc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/msg.h&gt;</span></span><br><br><span class="hljs-comment">// 创建或打开消息队列，可创建的数量收系统限制</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">msgget</span><span class="hljs-params">(<span class="hljs-type">key_t</span> key, <span class="hljs-type">int</span> msgflg)</span>;<br><br><span class="hljs-comment">// 发送消息</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">msgsnd</span><span class="hljs-params">(<span class="hljs-type">int</span> msqid, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *msgp, <span class="hljs-type">size_t</span> msgsz, <span class="hljs-type">int</span> msgflg)</span>;<br><span class="hljs-comment">// 接收消息，与 FIFO 不同，可以指定取走某条消息</span><br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">msgrcv</span><span class="hljs-params">(<span class="hljs-type">int</span> msqid, <span class="hljs-type">void</span> *msgp, <span class="hljs-type">size_t</span> msgsz, <span class="hljs-type">long</span> msgtyp, <span class="hljs-type">int</span> msgflg)</span>;<br><br><span class="hljs-comment">// 控制函数</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">msgctl</span><span class="hljs-params">(<span class="hljs-type">int</span> msqid, <span class="hljs-type">int</span> cmd, <span class="hljs-keyword">struct</span> msqid_ds *buf)</span>;<br></code></pre></td></tr></table></figure><p>消息传输结构体定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">msg_buf</span> &#123;</span><br>    <span class="hljs-type">long</span> mtype;       <span class="hljs-comment">// 消息类型</span><br>    <span class="hljs-type">char</span> mtext[<span class="hljs-number">512</span>];  <span class="hljs-comment">// 消息内容</span><br>&#125; <span class="hljs-type">msg_buf_t</span>;<br></code></pre></td></tr></table></figure><ul><li>type 变量类型必须是 long</li><li>text 可以是任意类型，内核只关心其大小</li></ul><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><h3 id="发送"><a href="#发送" class="headerlink" title="发送"></a>发送</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ipc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/shm.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MSG_MAX_LEN (512)</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">long</span> msg_type;<br>    <span class="hljs-type">char</span> msg_ctx[MSG_MAX_LEN];<br>&#125; <span class="hljs-type">msg_t</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    <span class="hljs-type">int</span> qid;<br>    <span class="hljs-type">msg_t</span> msg;<br><br>    qid = msgget((<span class="hljs-type">key_t</span>)<span class="hljs-number">1234</span>, (IPC_CREAT | <span class="hljs-number">0666</span>));<br>    <span class="hljs-keyword">if</span> (qid == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;msgget\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;open queue %d\n&quot;</span>, qid);<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter some message to send:&quot;</span>);<br>        fgets(msg.msg_ctx, MSG_MAX_LEN, <span class="hljs-built_in">stdin</span>);<br>        msg.msg_type = getpid();<br><br>        <span class="hljs-keyword">if</span> (msgsnd(qid, &amp;msg, <span class="hljs-built_in">strlen</span>(msg.msg_ctx), <span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;msgsnd error\n&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;msgsnd ok\n&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> ((<span class="hljs-built_in">strncmp</span>(msg.msg_ctx, <span class="hljs-string">&quot;q&quot;</span>, <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>) <br>            || (<span class="hljs-built_in">strncmp</span>(msg.msg_ctx, <span class="hljs-string">&quot;quit&quot;</span>, <span class="hljs-number">4</span>) == <span class="hljs-number">0</span>))<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;quit&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="接收"><a href="#接收" class="headerlink" title="接收"></a>接收</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ipc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/msg.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MSG_MAX_LEN (512)</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">long</span> msg_type;<br>    <span class="hljs-type">char</span> msg_ctx[MSG_MAX_LEN];<br>&#125; <span class="hljs-type">msg_t</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    <span class="hljs-type">int</span> qid;<br>    <span class="hljs-type">msg_t</span> msg;<br><br>    qid = msgget((<span class="hljs-type">key_t</span>)<span class="hljs-number">1234</span>, (IPC_CREAT | <span class="hljs-number">0666</span>));<br>    <span class="hljs-keyword">if</span> (qid == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;msgget\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;open queue %d\n&quot;</span>, qid);<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-comment">/*读取消息队列*/</span><br>        <span class="hljs-built_in">memset</span>(msg.msg_ctx, <span class="hljs-number">0</span>, MSG_MAX_LEN);<br><br>        <span class="hljs-keyword">if</span> (msgrcv(qid, (<span class="hljs-type">void</span>*)&amp;msg, MSG_MAX_LEN, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;msgrcv error\n&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>        &#125;<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;msgrcv[%ld]: %s&quot;</span>, msg.msg_type, msg.msg_ctx);<br><br>        <span class="hljs-keyword">if</span> ((<span class="hljs-built_in">strncmp</span>(msg.msg_ctx, <span class="hljs-string">&quot;q&quot;</span>, <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>) <br>            || (<span class="hljs-built_in">strncmp</span>(msg.msg_ctx, <span class="hljs-string">&quot;quit&quot;</span>, <span class="hljs-number">4</span>) == <span class="hljs-number">0</span>))<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;quit&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 从系统内核删除消息队列</span><br>    <span class="hljs-keyword">if</span> ((msgctl(qid, IPC_RMID, <span class="hljs-literal">NULL</span>)) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;msgctl error\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;delete msg qid: %d\n&quot;</span>, qid);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【linux 学习笔记】管道</title>
      <link href="/linux/D3-%E7%AE%A1%E9%81%93/"/>
      <url>/linux/D3-%E7%AE%A1%E9%81%93/</url>
      
        <content type="html"><![CDATA[<p>先看例子</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> | grep hello<br></code></pre></td></tr></table></figure><p><code>|</code> 就是管道字符，将前一个命令的标准输出通过管道，作为后一个命令的输入</p><p>管道可以抽象成一个可读写文件，遵循一切皆文件的设计思想</p><p>虽然形态上是文件，但管道占用的是内存空间</p><h2 id="管道分类"><a href="#管道分类" class="headerlink" title="管道分类"></a>管道分类</h2><ul><li>匿名管道（无名管道）</li><li>命名管道（有名管道）</li></ul><p>有名无名是根据管道对外部（进程）是否可见而决定的</p><p>匿名管道保证了数据的安全，但也降低了管道的通用性</p><p>命名管道本质是一个文件，可以让多个无相关的进程进行通讯</p><h3 id="匿名管道（PIPE）"><a href="#匿名管道（PIPE）" class="headerlink" title="匿名管道（PIPE）"></a>匿名管道（PIPE）</h3><p>匿名管道特点：</p><ol><li>只能用于父子进程之间，它只能在一个进程中被创建出来， 然后通过继承的方式将他的文件描述符传递给子进程</li><li>无法 open() 获取 fd</li><li>有两个文件描述符，一个用于读，一个用于写（半双工）</li><li>无写保护</li><li>不能用 lseek() 定位，因为不是普通文件，且只存在内核的内存空间中</li></ol><p>总结：只能用于一对一的亲缘进程通信</p><h3 id="命名管道（FIFO）"><a href="#命名管道（FIFO）" class="headerlink" title="命名管道（FIFO）"></a>命名管道（FIFO）</h3><ul><li>存在普通文件系统中</li><li>不能使用 lseek() 来定位，原因是数据存储于内存中。</li><li>具有写入原子性</li><li>先进先出</li></ul><p>最适合的应用场景：<strong>日志系统</strong></p><h2 id="管道使用"><a href="#管道使用" class="headerlink" title="管道使用"></a>管道使用</h2><h3 id="匿名管道"><a href="#匿名管道" class="headerlink" title="匿名管道"></a>匿名管道</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @param pipefd[0] 读取端 fd</span><br><span class="hljs-comment"> * @param pipefd[1] 写入端 fd</span><br><span class="hljs-comment"> * @return 0 成功，-1 失败</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pipe</span><span class="hljs-params">(<span class="hljs-type">int</span> pipefd[<span class="hljs-number">2</span>])</span>;<br></code></pre></td></tr></table></figure><p>需要注意：</p><ol><li>父进程 fork() 后，需要关闭不用的管道，让管道具有单向性</li><li>不需要管道时，将剩余的一端关闭即可</li></ol><p>刚 fork() 时<br><img src="https://cdn.jsdelivr.net/gh/24849748/PicBed/ob/20241029004447.png" alt="20241029004447"></p><p>父-&gt;子<br><img src="https://cdn.jsdelivr.net/gh/24849748/PicBed/ob/20241029004456.png" alt="20241029004456"></p><p>子-&gt;父<br><img src="https://cdn.jsdelivr.net/gh/24849748/PicBed/ob/20241029004501.png" alt="20241029004501"></p><h3 id="命名管道"><a href="#命名管道" class="headerlink" title="命名管道"></a>命名管道</h3><p>在终端中创建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkfifo</span> myfifo<br><span class="hljs-comment"># 查看文件类型</span><br>file myfifo<br></code></pre></td></tr></table></figure><p>用代码创建</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">mkfifo</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> * pathname, <span class="hljs-type">mode_t</span> mode)</span>;<br></code></pre></td></tr></table></figure><p>mode 模式及权限参数说明：</p><ul><li>O_RDONLY：读管道。</li><li>O_WRONLY：写管道。</li><li>O_RDWR：读写管道。</li><li>O_NONBLOCK：非阻塞。</li><li>O_CREAT：如果该文件不存在，那么就创建一个新的文件，并用第三个参数为其设置权限。</li><li>O_EXCL：如果使用 O_CREAT 时文件存在，那么可返回错误消息。这一参数可测试文件是否存在。</li></ul><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-comment">// father -&gt; child</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    <span class="hljs-type">pid_t</span> pid;<br>    <span class="hljs-type">int</span> pipe_fd[<span class="hljs-number">2</span>];<br><br>    <span class="hljs-type">char</span> buffer[<span class="hljs-number">100</span>];<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *data = <span class="hljs-string">&quot;balala pilipala&quot;</span>;<br>    <span class="hljs-type">int</span> len_read, len_write;<br><br>    <span class="hljs-built_in">memset</span>(buffer, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(buffer));<br><br>    <span class="hljs-comment">// 创建管道</span><br>    <span class="hljs-keyword">if</span> (pipe(pipe_fd) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;pipe create error\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    pid = fork();<br>    <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>) <span class="hljs-comment">/*!&lt; 子进程 */</span><br>    &#123;<br>        close(pipe_fd[<span class="hljs-number">1</span>]);<br><br>        sleep(<span class="hljs-number">3</span>);<br>        len_read = read(pipe_fd[<span class="hljs-number">0</span>], buffer, <span class="hljs-keyword">sizeof</span>(buffer));<br>        <span class="hljs-keyword">if</span> (len_read &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[child] read %d bytes from pipe: %s\n&quot;</span>, len_read, buffer);<br>        &#125;<br><br>        close(pipe_fd[<span class="hljs-number">0</span>]);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid &gt; <span class="hljs-number">0</span>) <span class="hljs-comment">/*!&lt; 父进程 */</span><br>    &#123;<br>        close(pipe_fd[<span class="hljs-number">0</span>]);<br><br>        sleep(<span class="hljs-number">1</span>);<br>        len_write = write(pipe_fd[<span class="hljs-number">1</span>], data, <span class="hljs-built_in">strlen</span>(data));<br>        <span class="hljs-keyword">if</span> (len_write != <span class="hljs-number">-1</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[father] write %d bytes to pipe: %s\n&quot;</span>, len_write, data);<br>        &#125;<br><br>        close(pipe_fd[<span class="hljs-number">1</span>]);<br><br>        waitpid(pid, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【linux 学习笔记】信号</title>
      <link href="/linux/D2-%E4%BF%A1%E5%8F%B7/"/>
      <url>/linux/D2-%E4%BF%A1%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<ul><li>Linux 进程间通信的一种</li><li>signal，又称软中断</li><li>是进程间通信机制中唯一的异步通信机制</li><li>任何系统可以使用 kill() 来产生任何信号</li></ul><h2 id="信号类型"><a href="#信号类型" class="headerlink" title="信号类型"></a>信号类型</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看系统支持的信号</span><br><span class="hljs-built_in">kill</span> -l<br></code></pre></td></tr></table></figure><ol><li>1~31 为非实时性信号（不可靠信号），是从 UNIX 系统中继承下来的信号</li><li>34~64 为实时性信号（可靠信号）</li><li>无 32、33</li></ol><p>非实时信号不支持排队，进程只能收到一次，也只会处理一次，如果进程没有及时处理，信号会丢失；实时信号则支持排队，发送多少个信号，进程就会处理多少次。</p><h2 id="信号处理"><a href="#信号处理" class="headerlink" title="信号处理"></a>信号处理</h2><p>产生信号的事件可以分 3 类：</p><ul><li>程序错误<ul><li>segmentation fault，通常是硬件检测到的，但由内核发送信号</li></ul></li><li>外部事件<ul><li>比如 ctrl+c、进程超过文件大小限制</li></ul></li><li>显示请求<ul><li>调用 kill()</li></ul></li></ul><h3 id="处理方式"><a href="#处理方式" class="headerlink" title="处理方式"></a>处理方式</h3><ol><li>忽略，大部分信号都可以被忽略，但 SIGKILL 和 SIGSTOP 不能被忽略</li><li>捕获，告诉内核我有专门的函数来处理这个信号</li><li>默认，啥都不做，内核会执行默认动作，比如终止进程</li></ol><p>还有 sigaction() 函数，可以设置信号处理方式，比 signal() 更强大，暂不作深入了解</p><h3 id="信号发送相关接口"><a href="#信号发送相关接口" class="headerlink" title="信号发送相关接口"></a>信号发送相关接口</h3><p>要向运行在另一个终端上的 PID 为 666 的进程发送“挂断”信号（SIGHUP）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 这里的-1 是指信号值为 1 的 SIGHUP 信号</span><br><span class="hljs-built_in">kill</span> -1 666<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">kill</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid, <span class="hljs-type">int</span> sig)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 向当前进程发送信号，等于 kill(getpid(), sig);</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">raise</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span>; <br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 闹钟函数，seconds 秒后向进程发送 SIGALRM 信号</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">alarm</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> seconds)</span>;<br></code></pre></td></tr></table></figure><p>类似时间到了会触发 SIGALRM 信号的定时器，叠加 signal()，一个软件定时器就实现好了</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">signal_handler</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;signal number is %d \n&quot;</span>, sig);<br><br>    <span class="hljs-keyword">if</span> (sig == SIGINT) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sig == SIGINT\n\n&quot;</span>);<br><br>        signal(SIGINT, SIG_DFL); <span class="hljs-comment">/*!&lt; 重置 SIGINT 信号为默认情况，下次不会进来这个函数了 */</span><br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    <span class="hljs-comment">/** 设置信号处理的回调函数 */</span><br>    signal(SIGINT, signal_handler); <span class="hljs-comment">/*!&lt; SIGINT 由 ctrl+c 产生，这里设置回调函数 */</span><br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;按 ctrl+c 产生 SIGINT 信号。..\n&quot;</span>);<br>        sleep(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【linux 学习笔记】进程</title>
      <link href="/linux/D1-%E8%BF%9B%E7%A8%8B/"/>
      <url>/linux/D1-%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<ol><li>一个终端等于一个进程</li><li>一个程序经常同时启动多个进程以并行多个任务。这就引入<strong>进程间通讯</strong>的概念</li><li>只要系统内存足够，理论上可用运行无数个进程</li></ol><h2 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h2><ul><li>PID：ProcessID，16 位正整数，默认 2~32768</li><li>1 为特殊进程 init，负责管理其他进程</li><li>PID 自动按顺序分配</li></ul><h3 id="父进程"><a href="#父进程" class="headerlink" title="父进程"></a>父进程</h3><ul><li>父进程的进程号（PID）即为子进程的父进程号（PPID）</li><li>用户可以通过调用 getppid() 函数来获得当前进程的父进程号</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看当前在系统上运行的所有进程（包括其他用户的）</span><br>ps -aux<br><br><span class="hljs-comment"># 以直观的方式查看父子进程的关系，没有的话 sudo apt install psmisc</span><br>pstree<br></code></pre></td></tr></table></figure><h2 id="进程与程序"><a href="#进程与程序" class="headerlink" title="进程与程序"></a>进程与程序</h2><ul><li>程序是静态文件，或称可执行文件</li><li>进程是动态实体，是程序执行的具体实例。它包括了运行环境、CPU、外设等</li><li>一个程序可用实例化很多个进程</li><li>每个进程都有单独的地址空间</li></ul><h2 id="进程状态"><a href="#进程状态" class="headerlink" title="进程状态"></a>进程状态</h2><p><img src="https://cdn.jsdelivr.net/gh/24849748/PicBed/ob/20241027215329.png" alt="20241027215329"></p><h2 id="进程创建"><a href="#进程创建" class="headerlink" title="进程创建"></a>进程创建</h2><ol><li>system()<ol><li>模拟调用 shell 终端运行一个程序</li><li>阻塞的，需要立刻返回在指令后面加 &amp; 运行，<code>ls &amp;</code></li><li>返回结果不可预料</li></ol></li><li>fork()</li></ol><p><img src="https://cdn.jsdelivr.net/gh/24849748/PicBed/ob/20241027224031.png" alt="20241027224031"></p><h3 id="exec-族函数"><a href="#exec-族函数" class="headerlink" title="exec 族函数"></a>exec 族函数</h3><p>如果父子进程都一样的话，子进程能干的父进程也能干。为了让子进程做点不一样的事，exec 系列函数就诞生了。</p><p>执行完后，原进程除了进程号外，其他内容（内存空间、数据段、代码段、环境变量等）都被替换掉</p><p>脱胎换骨、覆盖的意思</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> err;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;this is a execl function test demo!\n\n&quot;</span>);<br><br>    <span class="hljs-comment">// 必须以 NULL 结尾，效果等同于 ls -la</span><br>    err = execl(<span class="hljs-string">&quot;/bin/ls&quot;</span>, <span class="hljs-string">&quot;ls&quot;</span>, <span class="hljs-string">&quot;-la&quot;</span>, <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-comment">// 因为替换了，所以一般不会返回，除非发生错误</span><br>    <span class="hljs-keyword">if</span> (err &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;execl fail!\n\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 由于 exec 是替换，因此 Done 不会被执行</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Done!\n\n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>exec 其他函数原型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">execl</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *path, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *arg, ...)</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">execlp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *file, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *arg, ...)</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">execle</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *path, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *arg, ..., <span class="hljs-type">char</span> *<span class="hljs-type">const</span> envp[])</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">execv</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *path, <span class="hljs-type">char</span> *<span class="hljs-type">const</span> argv[])</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">execvp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *file, <span class="hljs-type">char</span> *<span class="hljs-type">const</span> argv[])</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">execve</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *path, <span class="hljs-type">char</span> *<span class="hljs-type">const</span> argv[], <span class="hljs-type">char</span> *<span class="hljs-type">const</span> envp[])</span><br></code></pre></td></tr></table></figure><h2 id="进程终止"><a href="#进程终止" class="headerlink" title="进程终止"></a>进程终止</h2><p>正常终止：</p><ol><li>从 main 返回</li><li>调用 exit() 终止</li><li>调用 _exit() 终止</li></ol><p><img src="https://cdn.jsdelivr.net/gh/24849748/PicBed/ob/20241027231500.png" alt="20241027231500"></p><p>异常终止：</p><ol><li>调用 abort() 终止</li><li>系统信号终止</li></ol><h2 id="进程等待"><a href="#进程等待" class="headerlink" title="进程等待"></a>进程等待</h2><p>当调用 exit() 后，进程变成了僵尸进程（无内存空间、没有可执行代码、不能被调度）。<br>无论如何，父进程都要回收这个僵尸进程。<br>调用 wait() 或者 waitpid() 函数其实就是将这些僵尸进程回收， 释放僵尸进程占有的内存空间，并且了解一下进程终止的状态信息。</p><p>fork &amp; wait 需要成对出现</p><p>函数原型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">pid_t</span> <span class="hljs-title function_">wait</span><span class="hljs-params">(<span class="hljs-type">int</span> *wstatus)</span>;<br><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">waitpid</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid, <span class="hljs-type">int</span> *wstatus, <span class="hljs-type">int</span> options)</span>;<br></code></pre></td></tr></table></figure><p>代码示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">pid_t</span> pid, child_pid;<br>    <span class="hljs-type">int</span> status;<br><br>    pid = fork(); <span class="hljs-comment">//(1)</span><br><br>    <span class="hljs-keyword">if</span> (pid &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error fork\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">/*子进程*/</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>)<br>    &#123; <span class="hljs-comment">//(2)</span><br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I am a child process!, my pid is %d!\n\n&quot;</span>, getpid());<br><br>        <span class="hljs-comment">/*子进程暂停 3s*/</span><br>        sleep(<span class="hljs-number">3</span>);<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I am about to quit the process!\n\n&quot;</span>);<br><br>        <span class="hljs-comment">/*子进程正常退出*/</span><br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">//(3)</span><br>    &#125;<br>    <span class="hljs-comment">/*父进程*/</span><br>    <span class="hljs-keyword">else</span><br>    &#123; <span class="hljs-comment">//(4)</span><br><br>        <span class="hljs-comment">/*调用 wait，父进程阻塞*/</span><br>        child_pid = wait(&amp;status); <span class="hljs-comment">//(5)</span><br><br>        <span class="hljs-comment">/*若发现子进程退出，打印出相应情况*/</span><br>        <span class="hljs-keyword">if</span> (child_pid == pid)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Get exit child process id: %d\n&quot;</span>, child_pid);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Get child exit status: %d\n\n&quot;</span>, status);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Some error occured.\n\n&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Git】将子文件夹独立为子模块</title>
      <link href="/git/Git%20%E5%AD%90%E6%96%87%E4%BB%B6%E5%A4%B9%E5%88%86%E7%A6%BB/"/>
      <url>/git/Git%20%E5%AD%90%E6%96%87%E4%BB%B6%E5%A4%B9%E5%88%86%E7%A6%BB/</url>
      
        <content type="html"><![CDATA[<ul><li>一开始创建仓库没考虑很多，随着开发提交越来越多</li><li>希望将目录独立出来，保留该目录在原仓库的所有提交记录</li><li>作为原仓库的子仓库管理</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1.在原仓库下提取要分离子文件夹的所有提交记录</span><br>git subtree <span class="hljs-built_in">split</span> -P [subdir] -b [branch-temp]<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 2.原仓库外创建一个新的文件夹，并初始化为 git 仓库</span><br><span class="hljs-built_in">mkdir</span> [subdir]<br>git init<br><br><span class="hljs-comment"># 将原仓库的 [branch-temp] 分支拉取到新仓库</span><br>git pull [原仓库地址] [branch-temp]<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 3.移除原仓库 [subdir] 目录及其提交记录</span><br>git <span class="hljs-built_in">rm</span> -rf [subdir]<br>git commit -m <span class="hljs-string">&#x27;Remove some fxxking shit&#x27;</span><br><br><span class="hljs-comment"># 4.移除 1 分离出来的临时分支</span><br>git branch -D [branch-temp]<br><br><span class="hljs-comment"># 5.作为子模块与原仓库关联</span><br>git submodule add [新仓库地址] [subdir]<br></code></pre></td></tr></table></figure><p>注意备份, 原来 .gitignore 忽略了的文件需要重新添加</p><blockquote><p>参考链接：<br><a href="https://prinsss.github.io/splitting-a-subfolder-out-into-a-new-git-repository/">https://prinsss.github.io/splitting-a-subfolder-out-into-a-new-git-repository/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Git】基础操作</title>
      <link href="/git/Git%20%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"/>
      <url>/git/Git%20%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>Git 是软件开发中一个非常重要的工具，虽然现代编辑器大部分都集成了 Git 功能，但对于初学者，个人还是非常建议从命令行开始学习，这样对 Git 的理解会更加深刻。而且不必掌握所有操作，只要能够满足日常开发需求，后续在遇到问题时再从网上进行查阅即可。</p><h2 id="概念理解"><a href="#概念理解" class="headerlink" title="概念理解"></a>概念理解</h2><ol><li>文件状态<ul><li>未跟踪（untrack）</li><li>未修改（unmodified）</li><li>已修改（modified）</li><li>已暂存（staged）</li></ul></li><li>工作区域<ul><li>工作区</li><li>暂存区</li><li>本地仓库</li><li>远程仓库</li></ul></li></ol><p><img src="https://raw.githubusercontent.com/24849748/PicBed/main/ob/202306121639294.png" alt="image.png|510"></p><h2 id="最最基础的操作"><a href="#最最基础的操作" class="headerlink" title="最最基础的操作"></a>最最基础的操作</h2><p>这部分操作基本覆盖了个人开发日常 72.96% （有小数点可信）的需求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 克隆别人的仓库</span><br>git <span class="hljs-built_in">clone</span> &lt;url&gt;<br><br><span class="hljs-comment"># 初始化一个 git 仓库</span><br>git init <br><span class="hljs-comment"># 初始化时顺便指定分支名</span><br>git init -b main<br><br><span class="hljs-comment"># 将文件添加到暂存区</span><br>git add &lt;file&gt;<br><br><span class="hljs-comment"># 将暂存区文件提交到本地仓库</span><br>git commit -m <span class="hljs-string">&quot;提交信息&quot;</span><br><br><span class="hljs-comment"># 添加远程仓库</span><br>git remote add origin &lt;url&gt;<br><span class="hljs-comment"># 查看远程仓库</span><br>git remote -v<br><br><span class="hljs-comment"># 将本地仓库推送到远程仓库</span><br>git push origin &lt;branch&gt;<br><br><span class="hljs-comment"># 拉取远程仓库</span><br>git pull origin &lt;branch&gt;<br></code></pre></td></tr></table></figure><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看所有分支</span><br>git branch -a<br><br><span class="hljs-comment"># 创建并切换分支</span><br>git checkout -b &lt;branch&gt;<br><br><span class="hljs-comment"># 切换已经存在的分支</span><br>git checkout &lt;branch&gt;<br><br><span class="hljs-comment"># 删除分支</span><br>git branch -d &lt;branch&gt;<br></code></pre></td></tr></table></figure><h3 id="–amend"><a href="#–amend" class="headerlink" title="–amend"></a>–amend</h3><ol><li>修改最近一次提交的信息</li><li>对最近一次提交的内容进行修改，特别适合用于漏提交文件的场景</li><li>最近一次提交已经在远程仓库的话，千万不能用</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m <span class="hljs-string">&quot;提交信息&quot;</span> --amend<br></code></pre></td></tr></table></figure><h3 id="stash"><a href="#stash" class="headerlink" title="stash"></a>stash</h3><p><code>git push</code> 前如果有代码没有提交，会被打断的<br>我们可以使用 <code>stash</code> 来保存当前的改动，然后再 <code>push</code> 或 <code>pull</code>，操作完后再把改动恢复回来</p><p>适用场景：</p><ol><li>写完部分代码，但有部分代码还不想提交</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 放入暂存区</span><br>git stash<br><span class="hljs-comment"># 恢复之前暂存的改动</span><br>git stash pop<br><span class="hljs-comment"># 等同于 git stash</span><br>git stash push<br><span class="hljs-comment"># 指定某个文件，并添加 commit 信息</span><br>git stash push -m <span class="hljs-string">&quot;commit message&quot;</span> file1 file2<br><span class="hljs-comment"># 查看 stash 记录</span><br>git stash list<br><span class="hljs-comment"># 恢复某个 stash 并删除 stash 记录</span><br>git stash pop stash@&#123;0&#125;<br><span class="hljs-comment"># 恢复某个 stash，但不删除 stash 记录</span><br>git stash apply stash@&#123;0&#125;<br><span class="hljs-comment"># 删除某个 stash</span><br>git stash drop stash@&#123;0&#125;<br><span class="hljs-comment"># 删除所有 stash</span><br>git stash clear<br></code></pre></td></tr></table></figure><p>举例：</p><ul><li>功能开发一半，改了一个 bug</li><li>bug 比较重要需要先提交</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit bug <span class="hljs-comment"># commit bug</span><br>git stash <span class="hljs-comment"># 把其他内容暂存起来</span><br>git pull --rebase <span class="hljs-comment"># 以 rebase 方式拉取更新远程最新的代码</span><br>git push <span class="hljs-comment"># 上传 commit 的 bug</span><br>git stash pop <span class="hljs-comment"># 恢复之前暂存内容</span><br></code></pre></td></tr></table></figure><blockquote><p>PS：vscode 中的 stash 挺好用的，可以单独 stash 某个文件，结合 Git Graph 插件使用，可以指定对某个 stash pop&#x2F;apply&#x2F;drop</p></blockquote><h3 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h3><p>软件开发离不开版本管理，使用 tag 可以方便标记版本，方便溯源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">git tag &lt;tag&gt; <span class="hljs-comment"># 在当前最新的提交记录上打 tag</span><br>git tag -a &lt;tag&gt; -m &lt;tag commit&gt; <span class="hljs-comment"># 打 tag 并添加 commit 说明</span><br><br>git tag -d &lt;tag&gt; <span class="hljs-comment"># 删除 tag</span><br><br>git push &lt;remote&gt; &lt;tag&gt;   <span class="hljs-comment"># 推送指定 tag 到远程仓库</span><br>git push origin --tags <span class="hljs-comment"># 推送所有 tag 到远程仓库</span><br>git push &lt;remote&gt; --delete &lt;tag&gt; <span class="hljs-comment"># 删除远程仓库某个 tag</span><br><br>git tag <span class="hljs-comment"># 查看当前仓库所有标签</span><br>git show &lt;tag&gt; <span class="hljs-comment"># 查看标签节点具体信息</span><br></code></pre></td></tr></table></figure><h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><h3 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h3><h3 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h3><p><code>git reset</code> 操作会丢失 commit 信息，因此建议使用 <code>git revert</code> 替代。通常我会在以下场景使用到：</p><ol><li>提交到错误的分支</li><li>提交了不需要提交的代码</li><li>代码未推送到远程仓库</li><li>仅需要撤回最近一两个 commit</li><li>仓库只有自己在维护</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">git reset --soft HEAD^ <span class="hljs-comment"># 撤销最近一次提交，但保留工作区改动</span><br><br>git reset --hard HEAD^ <span class="hljs-comment"># 回退到上个版本。 </span><br>git reset --hard HEAD~n <span class="hljs-comment"># 回退到前 n 次提交之前，若 n=3，则可以回退到 3 次提交之前。 </span><br>git reset --hard commit_sha <span class="hljs-comment"># 回滚到指定 commit 的 sha 码，推荐使用这种方式。</span><br><br><span class="hljs-comment"># commit_sha 可以在远程仓库里、或者 git log 命令查看</span><br>git reset --hard 05ac0bfb2929d9cbwiener75e52ecb011950fb<br></code></pre></td></tr></table></figure><p>reset 三个参数的区别：</p><ul><li>–soft：只撤销 <code>git commit</code>，不撤销 <code>git add</code>，不删除工作空间代码改动</li><li>–hard：撤销 <code>git commit</code>、<code>git add</code>，删除工作空间代码改动，恢复到上一次 <code>git commit</code> 的状态</li><li>–mixed：撤销 <code>git commit</code>、 <code>git add</code>，不删除工作空间代码改动，reset 默认参数</li></ul><p>如果 <code>reset</code> 涉及到远程仓库修改（reset 后的记录与远程仓库不同步），在 <code>push</code> 时需要强制推送</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push origin --force<br></code></pre></td></tr></table></figure><h2 id="个人习惯"><a href="#个人习惯" class="headerlink" title="个人习惯"></a>个人习惯</h2><ol><li>初始化的时候指定一个分支名</li><li>每次提交之前先看一下远程仓库有没有更新，如果有更新先拉取，避免冲突</li><li><code>push</code> 或 <code>pull</code> 一般不指定 <code>-u</code>，显式指定要操作的分支，可以避免一些失误</li><li>现代编辑器已经有 <code>Git</code> 集成，常用操作一般在编辑器里完成、比如 <code>add</code>、<code>stash</code> 等</li></ol>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Git】.gitignore 文件的使用</title>
      <link href="/git/Git%20ignore%E6%96%87%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/git/Git%20ignore%E6%96%87%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>这里记录 .gitignore 文件的一些书写规则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 忽略*.o和*.a文件</span><br>*.[oa]<br><br><span class="hljs-comment"># 忽略*.b和*.B文件，my.b除外</span><br>*.[bB]<br>!my.b<br><br><span class="hljs-comment"># 忽略dbg文件和dbg目录</span><br>dbg<br><br><span class="hljs-comment"># 只忽略dbg目录，不忽略dbg文件</span><br>dbg/<br><br><span class="hljs-comment"># 只忽略dbg文件，不忽略dbg目录</span><br>dbg<br>!dbg/<br><br><span class="hljs-comment"># 只忽略当前目录下的dbg文件和目录，子目录的dbg不在忽略范围内</span><br>/dbg<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Git】子模块 submodule 的使用</title>
      <link href="/git/Git%20%E5%AD%90%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/git/Git%20%E5%AD%90%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>子模块是 git 仓库中的仓库，在一些大型工程中比较常见。<br>对于 git 来说，子模块仅是主仓库管理的一个指向子仓库某个提交的指针。<br>虽然在物理层面上来说子模块的代码、文件都在主仓库里，但子模块的 git 管理是独立的。</p><h2 id="拉取子模块"><a href="#拉取子模块" class="headerlink" title="拉取子模块"></a>拉取子模块</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># clone 时拉取</span><br>git <span class="hljs-built_in">clone</span> --recursive &lt;url&gt;<br><br><span class="hljs-comment"># clone 后拉取</span><br>git submodule init<br>git submodule update<br></code></pre></td></tr></table></figure><p>对于上面两种方式，都会将主仓库下的所有子模块都拉取下来</p><p>如果只想拉取某个子模块，可以指定子模块的名称</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># clone 完之后，首次更新子仓库，后续更新可以无需 --init</span><br>git submodule update --init [sub_repo_name]<br></code></pre></td></tr></table></figure><h2 id="子模块的修改和更新"><a href="#子模块的修改和更新" class="headerlink" title="子模块的修改和更新"></a>子模块的修改和更新</h2><p>这里应该分两种情况讨论：</p><ol><li>子模块是自己修改的</li><li>子模块是他人修改的</li></ol><p>对于第一种情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 对子仓库代码进行提交推送</span><br>git add<br>git commit<br>git push<br><span class="hljs-comment"># 切换到主仓库，可以看到主仓库的子模块版本信息已经更新</span><br><span class="hljs-comment"># 我们需要更新主仓库引用该子模块的 commit id，这样当别人使用主仓库时，才会拉取到我们修改后的子模块代码</span><br>git add [submodule_name]<br>git commit<br></code></pre></td></tr></table></figure><p>对于第二种情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 更新子模块代码，git 会自动根据子模块版本信息更新所有子模块目录相关代码</span><br>git submodule update<br><span class="hljs-comment"># 也可以切换到子模块目录下，使用 git pull 更新子模块代码</span><br><span class="hljs-built_in">cd</span> [submodule_name]<br>git pull<br><br><span class="hljs-comment"># 同时，由于他人也更新了主仓库的子模块版本信息，我们需要更新主仓库的最新提交</span><br>git pull<br></code></pre></td></tr></table></figure><h2 id="创建-submodule"><a href="#创建-submodule" class="headerlink" title="创建 submodule"></a>创建 submodule</h2><p>比如需要将子模块 <code>submodule</code> 添加到主仓库 <code>main</code> 中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git submodule add &lt;submodule_url&gt; [子模块在主仓库中的路径]<br></code></pre></td></tr></table></figure><p>此时 git 仓库会多出：</p><ol><li><code>.gitmodules</code></li><li><code>.git/config</code> 的一些信息</li><li><code>.git/modules</code></li></ol><h2 id="删除子模块"><a href="#删除子模块" class="headerlink" title="删除子模块"></a>删除子模块</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 移除 .git/config 中的子模块信息，如果子模块本地有修改，加 --force</span><br>git submodule deinit [submodule_name]<br><span class="hljs-comment"># 移除 .gitmodule 相关内容</span><br>git <span class="hljs-built_in">rm</span> [submodule_name]<br><span class="hljs-comment"># 移除 .git/modules 残余信息</span><br>git commit -m <span class="hljs-string">&quot;rm submodule&quot;</span><br></code></pre></td></tr></table></figure><h3 id="更换子模块-url"><a href="#更换子模块-url" class="headerlink" title="更换子模块 url"></a>更换子模块 url</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 直接修改 .gitmodule 文件中的 url 链接</span><br><span class="hljs-comment"># 2. 更新</span><br>git submodule <span class="hljs-built_in">sync</span><br><span class="hljs-comment"># 3. 初始化子模块</span><br>git submodule init<br><span class="hljs-comment"># 4. 更新</span><br>git submodule update<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BLE 中各种角色概念</title>
      <link href="/ble/BLE%E4%B8%AD%E5%90%84%E7%A7%8D%E8%A7%92%E8%89%B2%E6%A6%82%E5%BF%B5/"/>
      <url>/ble/BLE%E4%B8%AD%E5%90%84%E7%A7%8D%E8%A7%92%E8%89%B2%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<p>蓝牙开发中，我们经常看到一些关于角色的名词，Master&#x2F;Slave，Central&#x2F;Peripheral，Server&#x2F;Client。如何区分这些角色呢？</p><h2 id="GAP-层-4-种角色"><a href="#GAP-层-4-种角色" class="headerlink" title="GAP 层 4 种角色"></a>GAP 层 4 种角色</h2><p>BLE 核心规范在 GAP 层定义了 4 种角色：</p><ul><li>广播者（Broadcaster）：又叫 Advertiser</li><li>观察者（Observer）：又叫 Scanner</li><li>外围设备（Peripheral）：也叫 Slave</li><li>中心设备（Central）：也叫 Master</li></ul><p>根据是否建立连接和蓝牙工作阶段，可以将者四种角色分为两组：broadcaster&#x2F;observer，perpheral&#x2F;central，前者属于广播阶段的角色，在 iBeacon 应用中比较常用；后者属于连接阶段的角色。</p><p>以蓝牙遥控器和电视为例：</p><ol><li>蓝牙遥控器发起广播，属于广播者；电视机扫描蓝牙设备，属于观察者。</li><li>蓝牙遥控器负责收集数据（按键数据、语音数据），一个遥控器同一时间一般只能连接一台电视，属于外围设备；电视机负责接收按键或语音数据，一般可以配对多个遥控器，属于中心设备。</li></ol><p>我们还可以根据最终建立连接的决定权来判断谁是主机谁是从机，比如有多个遥控设备同时发起广播，但最终决定与哪个遥控器建立连接的是电视，因此电视拥有最终建立连接的决定权，所以电视机是主机，遥控器则是从机。</p><p>需要注意的是，BLE 没有限制设备的角色范围。一个设备既可以是主机也可以是从机。</p><h2 id="Server-和-Client"><a href="#Server-和-Client" class="headerlink" title="Server 和 Client"></a>Server 和 Client</h2><p>前面几个角色是基于 GAP 层的，而 Server 和 Client 是基于 ATT&#x2F;GATT 层的一组角色。</p><p>ATT 采用 c&#x2F;s 模式，client 负责请求数据，server 负责提供数据。</p><p>与以上例子第二点类似，若电视需要获取遥控器电量，电视机是请求方，所以电视机是 Client；遥控器是提供方，所以遥控器是 Server。</p><p>此外，我们也可以服务的声明来判断，一般蓝牙服务是由遥控器声明的，所以遥控器是服务器 Server，反之电视机是客户端 Client。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一个人可以有多种角色，可以是个男生，也可以是个学生。对于 BLE 来说也是一个道理。</p>]]></content>
      
      
      <categories>
          
          <category> ble </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BLE </tag>
            
            <tag> 低功耗蓝牙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BLE 中的 HCI</title>
      <link href="/ble/BLE%E4%B8%AD%E7%9A%84HCI/"/>
      <url>/ble/BLE%E4%B8%AD%E7%9A%84HCI/</url>
      
        <content type="html"><![CDATA[<p>HCI（HOST Controller Interface）是 Host 和 Controller 之间数据交互的接口。</p><p>HCI 上传输的数据分 5 种：</p><ol><li>HCI Command，是协议栈通过给上层发送命令来控制芯片的行为</li><li>HCI ACL 数据，协议栈跟芯片双向交互的 L2CAP 以及上层数据</li><li>HCI SCO 数据：协议栈跟蓝牙芯片双向交互的音频数据</li><li>HCI Event：发送给对端 BLE 的 HCI 事件</li><li>HCI ISO 数据，蓝牙协议栈跟蓝牙芯片交互的 BLE audio 的数据（Core 5.2 才增加）</li></ol><p><img src="https://cdn.jsdelivr.net/gh/24849748/PicBed/ob/20240522182342.png" alt="20240522182342"></p><p>详细的数据格式参考 <em>蓝牙核心规范 Vol 4，Part E，第 5.4 小节</em>，下面我们简单了解一下 HCI Command 和 HCI Event 的格式，并重点关注一下常见的 HCI 错误码。</p><h3 id="HCI-Command"><a href="#HCI-Command" class="headerlink" title="HCI Command"></a>HCI Command</h3><p>HCI Command 用于从 Controller 发送命令到 Host，具体格式如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/24849748/PicBed/ob/20240522183841.png" alt="20240522183841"></p><p>OpCode: 长度 2byte 的操作码，分两个字段：</p><ul><li>OGF(Opcode Group Field)：操作码组字段，占高 6bit</li><li>OCF(Opcode Command Field)：操作码命令字段，占低 10bit</li></ul><p>OGF 分以下几组：</p><ul><li>0x01: Link Control commands，链路控制的，控制蓝牙跟 remote 沟通的</li><li>0x02: Link Policy commands，链路策略，比如转换角色等</li><li>0x03: HCI Control and Baseband commands，控制本地芯片跟基带的 OGF，比如 reset 本地芯片</li><li>0x04: Informational Parameters commands，读取信息，本地芯片的 LMP 版本、支持的 command、蓝牙地址等</li><li>0x05: status parameters commands，读取状态的命令，比如 rssi</li><li>0x06: Testing commands（进入测试模式的命令，DUT，device under test）</li><li>0x08: LE Controller commands，</li><li>0x3F: vendor-specific debug commands，厂商定义的</li></ul><p>OCF 很多，每个 OCF 后面带参数总长度，参数。</p><p>HCI Command Packet 的长度不能超过 255（包括包头 2+1+1 个字节）</p><h3 id="HCI-Event"><a href="#HCI-Event" class="headerlink" title="HCI Event"></a>HCI Event</h3><p><img src="https://cdn.jsdelivr.net/gh/24849748/PicBed/ob/20240522184922.png" alt="20240522184922"></p><ul><li>Event Code：唯一事件代码</li><li>Parameter Total：后面参数长度</li><li>Event Parameter：事件参数</li></ul><p>HCI 主要分为三种基本事件类型：</p><ol><li>通用命令完成事件</li><li>通用命令状态事件</li><li>特殊命令完成事件</li></ol><p>具体 HCI 事件查看 <em>蓝牙核心规范 Vol 4，Part E，第 7.7 小节</em> 。</p><h3 id="BLE-断连常见-HCI-错误码"><a href="#BLE-断连常见-HCI-错误码" class="headerlink" title="BLE 断连常见 HCI 错误码"></a>BLE 断连常见 HCI 错误码</h3><ul><li>0x08 - Connection Timeout<ul><li>连接超时。这个错误通常发生在连接的一方没有在预期时间内接收到对方的响应。</li></ul></li><li>0x13 - Remote User Terminated Connection<ul><li>远程用户终止了连接。这个错误表示对方设备主动断开了连接。</li></ul></li><li>0x14 - Remote Device Terminated Connection Due To Low Resources<ul><li>远程设备由于资源不足而终止了连接。可能是由于内存不足、电池电量低等原因。</li></ul></li><li>0x16 - Connection Terminated by Local Host<ul><li>本地主机终止了连接。这个错误表示本地设备主动断开了连接。</li></ul></li><li>0x3E - Connection Failed to be Established<ul><li>连接建立失败。这个错误表示连接尝试未成功。</li></ul></li><li>0x22 - Instant Passed<ul><li>在链路层事件中，”Instant” 是一个时间点，用于标记特定事件的时间。如果在到达这个时间点之前未完成预定的操作，就会产生这个错误。</li></ul></li><li>0x42 - Unacceptable Connection Parameters<ul><li>不可接受的连接参数。设备在连接过程中交换了连接参数，但这些参数不被接受。</li></ul></li><li>0x28 - Instant Passed<ul><li>链路层事件中指定的时间点已过，通常在通道映射更新过程中发生。</li></ul></li><li>0x3B - MAC Connection Failed<ul><li>MAC 层连接失败。这个错误可能与硬件相关的问题有关。</li></ul></li></ul><p>更多错误码，可在 <em>蓝牙核心规范 Vol 1，Part F，第 2 小节</em>  查看</p>]]></content>
      
      
      <categories>
          
          <category> ble </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BLE </tag>
            
            <tag> 低功耗蓝牙 </tag>
            
            <tag> HCI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BLE 基础概念</title>
      <link href="/ble/BLE%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"/>
      <url>/ble/BLE%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="协议栈"><a href="#协议栈" class="headerlink" title="协议栈"></a>协议栈</h2><p>在系统学习 BLE 之前，我们应该先认识一下协议栈的整体架构。</p><p><img src="https://cdn.jsdelivr.net/gh/24849748/PicBed/ob/20240519223707.png" alt="20240519223707"></p><p>从上图可以知道，BLE 将各子协议分为三大层：</p><ol><li>应用开发的 Profile 层</li><li>主机 Host 层</li><li>Controller 层</li></ol><p>而蓝牙协议栈的范围包括了整个 Host 层的子协议和 Controller 层中的 HCI 协议和 LL 协议。可以这么说，蓝牙协议栈是将我们的应用和芯片底层连接起来的一座桥梁。</p><p>蓝牙协议栈实质上是将应用层要传输的数据，经过层层子协议的封装，生成一个符合蓝牙协议的空中数据包。</p><p>下面将以一个蓝牙键盘应用为例，简单介绍一下各层协议的作用。</p><h4 id="Phy"><a href="#Phy" class="headerlink" title="Phy"></a>Phy</h4><p>Physical Layer，物理层。用来指定 BLE 所用的无线频段，调制解调方式和方法等。PHY 层做得好不好，直接决定整个 BLE 芯片的功耗，灵敏度以及 selectivity 等射频指标。</p><p>一个蓝牙键盘，不管硬件如何设计，一定是需要一个将冰冷的二进制数据转换为同样肉眼不可见但物理上存在数据的过程。</p><h4 id="LL"><a href="#LL" class="headerlink" title="LL"></a>LL</h4><p>Link Layer, LL 层是整个 BLE 协议栈的核心，也是 BLE 协议栈的难点和重点。</p><p>有些蓝牙芯片说能同时支持多少个 link，就是 LL 层的功劳。</p><p>LL 层只负责把数据发出去或者收回来，这么一说好像 LL 层干的事很简单，但实际做的事情是非常多的。</p><p>比如具体选择哪个射频通道进行通信，怎么识别空中数据包，具体在哪个时间点把数据包发送出去，怎么保证数据的完整性，ACK 如何接收，如何进行重传，以及如何对链路进行管理和控制等等。</p><h4 id="HCI"><a href="#HCI" class="headerlink" title="HCI"></a>HCI</h4><p>Host controller interface。HCI 主要用于是 Host 和 Controller 之间沟通的协议。</p><p>有些厂商将 Host 和 Controller 分为两颗芯片设计，这时候有个规范两者通信格式的协议是必要的。</p><p>目前笔者接触到的只有单芯片的设计方案，但 Host 和 Controller 在一个芯片上时，就完全可以直接通过接口来沟通了。有的蓝牙芯片厂商会在协议栈代码里保留这部分指令。</p><h4 id="L2CAP"><a href="#L2CAP" class="headerlink" title="L2CAP"></a>L2CAP</h4><p>Logic link control and adaptation protocol， 逻辑链路层。L2CAP 对 LL 进行了一次简单封装，LL 只关心传输的数据本身，L2CAP 要区分是加密通道还是普通通道，同时还要对连接间隔进行管理。</p><h4 id="SMP"><a href="#SMP" class="headerlink" title="SMP"></a>SMP</h4><p>Secure manager protocol。SMP 用来管理 BLE 连接的加密和安全的，如何保证连接的安全性，同时不影响用户的体验，这些都是 SMP 要考虑的工作。</p><p>当我们使用一个新键盘时，需要执行一步配对的过程，这个过程就是 SMP 的工作范围。</p><h4 id="GAP"><a href="#GAP" class="headerlink" title="GAP"></a>GAP</h4><p>Generic access profile。GAP 是解析 LL 层 payload（有效数据包）两种方式中的之一，而且是最简单的那一种。GAP 简单的对 LL payload 进行一些规范和定义，因此 GAP 能实现的功能极其有限。</p><p>GAP 目前主要用来进行广播，扫描和发起连接等。</p><h4 id="ATT"><a href="#ATT" class="headerlink" title="ATT"></a>ATT</h4><p>Attribute protocol。ATT 层用来定义用户命令及命令操作的数据，比如读取某个数据或者写某个数据。</p><p>BLE 引入了 attribute 概念，用来描述一条一条的数据。attribute 除了定义数据，同时定义该数据可以使用的 ATT 命令，因此这一层被称为 ATT 层。</p><h4 id="GATT"><a href="#GATT" class="headerlink" title="GATT"></a>GATT</h4><p>全称 Generic attribute profile，GATT 用来规范 attribute 中的数据内容，并运用 group（分组）的概念对 attribute 进行分类管理。</p><p>蓝牙键盘用到的 HID，在 GATT 层被分到了 0x1812 这一类里。</p><p>GATT 是两个素不相识的设备应用之前约定俗称的标准，没有 GATT，BLE 协议栈也能跑，但互联互通就存在问题。</p><h4 id="各种-Profile"><a href="#各种-Profile" class="headerlink" title="各种 Profile"></a>各种 Profile</h4><p>这是蓝牙 SIG 联盟针对一些应用场景定义的，如果这些 Profile 符合你产品的应用设计，那你完全可以拷贝过来不做修改地使用。</p><p>标准的蓝牙键盘使用的是 Profile 里的 HID 协议，我们可能会在其他地方听过这个 HID 协议，它是另一个组织 USB 委员会提出的标准协议，等于是 Profile 里的一个子协议。</p><p>除了 HID，主机可能还会有需要获取键盘电量的需求，Battery Profile 也是蓝牙官方定义的一个标准 Profile。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上仅是对蓝牙协议栈基础概念的一个简单介绍。BLE 协议栈对于很多开发者包括本人在内来说，是比较枯燥无味的。</p><p>但倘若对蓝牙协议栈架构有一定了解了，遇到问题后就可以有所方向地去针对性学习并解决问题，逐步将这些知识点串联起来，完善整个 BLE 知识体系。</p>]]></content>
      
      
      <categories>
          
          <category> ble </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BLE </tag>
            
            <tag> 低功耗蓝牙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python使用笔记</title>
      <link href="/code/Python%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/code/Python%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="不定参实现"><a href="#不定参实现" class="headerlink" title="不定参实现"></a>不定参实现</h3><p><code>*args **kwargs</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">arg1, arg2, *args, **kwargs</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;arg1: <span class="hljs-subst">&#123;arg1&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;arg2: <span class="hljs-subst">&#123;arg2&#125;</span>&quot;</span>)<br>    <br>    <span class="hljs-keyword">for</span> arg <span class="hljs-keyword">in</span> args:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Additional arg: <span class="hljs-subst">&#123;arg&#125;</span>&quot;</span>)<br>    <br>    <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> kwargs.items():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;key&#125;</span>: <span class="hljs-subst">&#123;value&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 使用混合的参数</span><br>func(<span class="hljs-string">&#x27;value1&#x27;</span>, <span class="hljs-string">&#x27;value2&#x27;</span>, <span class="hljs-string">&#x27;extra1&#x27;</span>, <span class="hljs-string">&#x27;extra2&#x27;</span>, key1=<span class="hljs-string">&#x27;value1&#x27;</span>, key2=<span class="hljs-string">&#x27;value2&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="传参默认值"><a href="#传参默认值" class="headerlink" title="传参默认值"></a>传参默认值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 直接在参数后面 = 即可，如果需要指定类型，在类型后面再 = </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">arg1=<span class="hljs-number">1</span>, arg2:<span class="hljs-built_in">str</span>=<span class="hljs-string">&quot;2&quot;</span></span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># python 要求在调用函数时，非默认参数必须出现在默认参数之前。</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">arg1=<span class="hljs-number">1</span>, arg2</span>) <span class="hljs-comment"># 错误的</span><br>    <span class="hljs-keyword">pass</span><br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">arg1, arg2=<span class="hljs-number">1</span></span>) <span class="hljs-comment"># 正确的</span><br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><h3 id="程序入口"><a href="#程序入口" class="headerlink" title="程序入口"></a>程序入口</h3><p>python 中，<code>if __name__ == &quot;__main__&quot;:</code> 表示的是当前程序以非模块的方式被执行时的入口，可以简单理解为 main 函数。</p><p>当当前程序作为模块被其他模块 import 时，如果不在这句语法内执行的代码，都会被运行一遍</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol><li>路径作为字符串前面要加上 <code>r</code>，因为包含 <code>\</code>，</li><li>os.walk 返回的文件路径是当前 python 文件的路径</li></ol>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【A/V】音频开发笔记</title>
      <link href="/audio/%E9%9F%B3%E9%A2%91%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
      <url>/audio/%E9%9F%B3%E9%A2%91%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="概念理解"><a href="#概念理解" class="headerlink" title="概念理解"></a>概念理解</h2><p><img src="https://cdn.jsdelivr.net/gh/24849748/PicBed/ob/20240518182233.png" alt="20240518182233"></p><p>蓝线表示现实中的模拟音频信号，红色点表示采样得到的数字信号。</p><h3 id="采样率"><a href="#采样率" class="headerlink" title="采样率"></a>采样率</h3><p>1s 能采样的次数，单位 Hz，比如 8k，1s 采样 8000 次；16k, 1s 采样 16000 次。</p><p>采样率越高，我们听到的声音就越细腻，在上图中的体现就是单位时间内红点变得更加密集。</p><p>人类能听到的范围在 20Hz ~ 20kHz 之间，为了保证声音不失真，采样频率建议在 40kHz 以上。</p><p>在数字音频领域，常用的采样率有：</p><ul><li>8,000 Hz - 电话所用采样率，对于人的说话已经足够</li><li>11,025 Hz</li><li>22,050 Hz - 无线电广播所用采样率</li><li>16,000 Hz</li><li>32,000 Hz - miniDV 数码视频 camcorder、DAT (LP mode) 所用采样率</li><li>44,100 Hz - 音频 CD, 也常用于 MPEG-1 音频（VCD, SVCD, MP3）所用采样率</li><li>47,250 Hz - Nippon Columbia (Denon) 开发的世界上第一个商用 PCM 录音机所用采样率</li><li>48,000 Hz - miniDV、数字电视、DVD、DAT、电影和专业音频所用的数字声音所用采样率</li><li>50,000 Hz - 二十世纪七十年代后期出现的 3M 和 Soundstream 开发的第一款商用数字录音机所用采样率</li><li>50,400 Hz - 三菱 X-80 数字录音机所用所用采样率</li><li>96,000 或者 192,000 Hz - DVD-Audio、一些 LPCM DVD 音轨、BD-ROM（蓝光盘）音轨、和 HD-DVD （高清晰度 DVD）音轨所用所用采样率</li><li>2.8224 MHz - SACD、 索尼 和 飞利浦 联合开发的称为 Direct Stream Digital 的 1 位 sigma-delta modulation 过程所用采样率。</li></ul><h3 id="位深"><a href="#位深" class="headerlink" title="位深"></a>位深</h3><p>一个样本的单位，或者说采样一次的数据单位，也叫位宽，量化精度。在上图中的体现就是红线用数值表示。</p><p>比如位深有只有 1 bit 的情况，那么音频数据的范围就只有 0 和 1，如果是 8 bit，那就是 0-0xff</p><p>位深另一个直观的体现就是音量的大小</p><h3 id="声道"><a href="#声道" class="headerlink" title="声道"></a>声道</h3><p>音频中可以将音频数据叠加在一起，于是有了声道的概念。声道越多听到的声音越立体，常见的有单声道（Mono）和双声道（Stereo）。</p><h3 id="码率（时间计算）"><a href="#码率（时间计算）" class="headerlink" title="码率（时间计算）"></a>码率（时间计算）</h3><p>以 8k 16bit 单声道为例，1s 的产生的数据为：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">8000 </span>* <span class="hljs-number">16</span>bit * <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>1ms 的数据量则是：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">8 </span>* <span class="hljs-number">16</span>bit * <span class="hljs-number">1</span> = <span class="hljs-number">8</span> * <span class="hljs-number">2</span> * <span class="hljs-number">1</span>bytes<br></code></pre></td></tr></table></figure><p>即 16 字节，以此类推，16k 16bit 1ms 的数据量是 32 字节。</p><p>如果按 1s 的时间单位来计算，就可以引入另一个新的概念：<strong>码率</strong>，单位 bps</p><h2 id="重采样"><a href="#重采样" class="headerlink" title="重采样"></a>重采样</h2><p>8k-&gt;16k</p><p>一个最简单的方法就是相邻拷贝，考虑到让声音变化更顺畅，可以对拷贝出来的那个数据做均值，即取相邻两个数据的平均值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int16_t</span> last_pcm;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @brief 软件采样率 8k 转 16k，插值 = （后 - 前） / 2 + 前</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * @param[in] src 8k 采样率 的 buffer, 长度为 SAMPLE_BUF_LEN_16BIT(60)</span><br><span class="hljs-comment"> * @param[in] dest 16k 采样率 的 buffer, 长度为 SOFT16K_BUF_LEN_16BIT(120)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">pt_pcm_8k_to_16k</span><span class="hljs-params">(<span class="hljs-type">int16_t</span> *src, <span class="hljs-type">int16_t</span> *dest)</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; SAMPLE_BUF_LEN_16BIT; i++)<br>    &#123;<br>        dest[i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] = src[i];<br>        dest[i * <span class="hljs-number">2</span>] = (src[i] - last_pcm) / <span class="hljs-number">2</span> + last_pcm;<br>        last_pcm = src[i];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="c-工具函数"><a href="#c-工具函数" class="headerlink" title="c 工具函数"></a>c 工具函数</h2><p>我们知道原始的音频数据在电脑上就是已二进制形式保存的，所以我们仅需要实现 c 语言的文件读取写入操作，再搭配上面推荐的 Au 软件，就可以基于 c 对音频做一些简单的处理，例如单双声道转换等。</p><p>下面是我实现的 pcm 原始数据操作函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @brief 读取 pcm 数据</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * @param[in] read_file pcm 文件路径 </span><br><span class="hljs-comment"> * @param[in] pcm 读取到的 pcm buffer，注意用完释放</span><br><span class="hljs-comment"> * @return int 大于 0：读取到的 pcm buffer 长度；否则表示操作失败</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">read_pcm</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *read_file, <span class="hljs-type">uint8_t</span> **pcm)</span><br>&#123;<br>    FILE *file = fopen(read_file, <span class="hljs-string">&quot;rb&quot;</span>);<br>    <span class="hljs-keyword">if</span> (file == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fopen file failed!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取待读取的数据长度</span><br>    fseek(file, <span class="hljs-number">0</span>, SEEK_END);<br>    <span class="hljs-type">long</span> pcm_size = ftell(file);<br>    rewind(file);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;pcm size=%ld\n&quot;</span>, pcm_size);<br><br>    <span class="hljs-type">uint8_t</span> *buffer = <span class="hljs-built_in">malloc</span>(pcm_size);<br>    <span class="hljs-keyword">if</span> (!buffer)<br>    &#123;<br>        fclose(file);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-2</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 读取文件内容到缓冲区</span><br>    <span class="hljs-type">size_t</span> result = fread(buffer, <span class="hljs-number">1</span>, pcm_size, file);<br>    <span class="hljs-keyword">if</span> (result != pcm_size) &#123;<br>        <span class="hljs-built_in">free</span>(buffer);<br>        fclose(file);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-3</span>;<br>    &#125;<br><br>    fclose(file);<br>    *pcm = buffer;<br><br>    <span class="hljs-keyword">return</span> pcm_size;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @brief 将 pcm buffer 保存到文件中</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * @param[in] save_path 待保存的路径</span><br><span class="hljs-comment"> * @param[in] buffer 待保存的 pcm buffer</span><br><span class="hljs-comment"> * @param[in] len 待保存的 pcm buffer 长度</span><br><span class="hljs-comment"> * @return int 0 成功，非 0 失败</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">save_pcm</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *save_path, <span class="hljs-type">void</span> *buffer, <span class="hljs-type">size_t</span> len)</span><br>&#123;<br>    FILE * file = fopen(save_path, <span class="hljs-string">&quot;wb&quot;</span>);<br>    <span class="hljs-keyword">if</span> (file == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fopen file failed!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 将数据写入文件</span><br>    <span class="hljs-type">size_t</span> written = fwrite(buffer, <span class="hljs-number">1</span>, len, file);<br>    <span class="hljs-keyword">if</span> (written != len) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;written error!\n&quot;</span>);<br>        fclose(file);<br>        <span class="hljs-keyword">return</span> EXIT_FAILURE;<br>    &#125;<br><br>    <span class="hljs-comment">// 关闭文件</span><br>    fclose(file);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;write success!\n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> pcm_size = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">uint8_t</span> *pcm = <span class="hljs-literal">NULL</span>;<br><br>    pcm_size = read_pcm(INPUT_PATH, &amp;pcm);<br>    <span class="hljs-keyword">if</span>(!pcm)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;pcm null\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// your code</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %02X %02X\n&quot;</span>, pcm_size, pcm[<span class="hljs-number">0</span>], pcm[<span class="hljs-number">1</span>]);<br><br>    save_pcm(OUTPUT_PATH, pcm, pcm_size);<br><br>    <span class="hljs-keyword">if</span>(pcm)<br>        <span class="hljs-built_in">free</span>(pcm);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="工具推荐"><a href="#工具推荐" class="headerlink" title="工具推荐"></a>工具推荐</h2><h3 id="文本转二进制"><a href="#文本转二进制" class="headerlink" title="文本转二进制"></a>文本转二进制</h3><p>嵌入式开发中，下位机通过串口将采集到的十六进制音频数据发送到 PC 上位机（串口助手），但显示的通常是文本数据。如果需要进一步分析，通常需要将文本显示的十六进制内容转换成电脑可以识别的二进制格式。</p><p>下面是我使用 python 简单写的处理脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">TXT_FILE_NAME = <span class="hljs-string">&quot;input.txt&quot;</span><br>PCM_FILE_NAME = <span class="hljs-string">&quot;output.pcm&quot;</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(TXT_FILE_NAME, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> file:<br>    pcm_ctx = file.read()<br><br>pcm_ctx = <span class="hljs-built_in">bytes</span>.fromhex(pcm_ctx)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(PCM_FILE_NAME, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> file:<br>    file.write(pcm_ctx)<br></code></pre></td></tr></table></figure><p>使用步骤：</p><ol><li>在本地创建一个 <code>txt2pcm.py</code> 的 python 文件，将上面的代码拷贝进去。</li><li>将串口打印的十六进制音频数据拷贝到同级目录下的 <code>input.txt</code> 文件内。</li><li>在当前目录打开终端，执行 <code>python txt2pcm.py</code> 生成二进制格式的文件。</li></ol><p>需要注意的是，串口打印的十六进制音频数据格式需要是 <code>%02X </code> 的，注意有空格。如果在单片机中，使用 printf 可能会产生一定的时间开销，建议直接使用串口外设的 tx 接口，在电脑上位机上，勾选 以 hex 显示 类似的选项。</p><h3 id="FFmpeg"><a href="#FFmpeg" class="headerlink" title="FFmpeg"></a>FFmpeg</h3><p><a href="https://ffmpeg.org/">官网地址</a></p><p>开源的音视频处理神器，许多开源音视频播放器 ffmpeg 开发。</p><p>从官网下载下来后，将目录下的 bin 文件夹添加到（windows）系统环境变量的 Path 里就可以在命令行里使用了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 以 小端有符号十六位，16k，单声道 的格式，将输入文件 output.pcm 转换成 output.wav 格式</span><br>ffmpeg -f s16le -ar 16000 -ac 1 -i output.pcm output.wav -y<br></code></pre></td></tr></table></figure><h3 id="audacity"><a href="#audacity" class="headerlink" title="audacity"></a>audacity</h3><p><a href="https://www.audacityteam.org/">官网地址</a></p><p>专业的音频处理工具，可以直接导入原始二进制数据，比较直观得观察音频数据内容</p><p><img src="https://cdn.jsdelivr.net/gh/24849748/PicBed/ob/20240518184647.png" alt="20240518184647"></p><h3 id="Adobe-Audition"><a href="#Adobe-Audition" class="headerlink" title="Adobe Audition"></a>Adobe Audition</h3><p>相比 <code>audacity</code>，个人认为 Au 更好用一些（黑暗主题）。除了基本的音频波形图，相比之下这几个功能更深得我心：</p><p>1、可自由放大缩小的坐标轴，以及可切换的 Y 轴单位</p><p><img src="https://cdn.jsdelivr.net/gh/24849748/PicBed/ob/20240630230720.png" alt="20240630230720"></p><p>2、统计（振幅统计需要在窗口菜单栏中打开）</p><p><img src="https://cdn.jsdelivr.net/gh/24849748/PicBed/ob/20240630235230.png" alt="20240630235230"></p><p>3、导出选定区域的音频</p><p><img src="https://cdn.jsdelivr.net/gh/24849748/PicBed/ob/20240630232439.png" alt="20240630232439"></p><p>还有其他专业的功能，例如分析频率等，大家可以自行挖掘。</p>]]></content>
      
      
      <categories>
          
          <category> audio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音视频 </tag>
            
            <tag> audio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习笔记</title>
      <link href="/code/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/code/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>高级语法与低级语法：<br>高低级是相对于机器而言的，越高级人越容易阅读理解，越低级机器执行越高效</p><table><thead><tr><th align="center">Python</th><th align="center">C</th></tr></thead><tbody><tr><td align="center">高级语言</td><td align="center">非高级语言</td></tr><tr><td align="center">解释性</td><td align="center">编译性</td></tr></tbody></table><p>解释性带来的好处就是可以，一行一行执行；编译性需要全部编译成一个可执行文件再执行</p><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><p>与 C 一些区别：</p><ul><li>python 无需 <code>;</code> 分号</li><li>python 不区分单双引号，但前后要匹配</li><li>python 对 缩进&#x2F;空格敏感</li><li>python 不需要特意声明变量</li></ul><h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><p>python 的输入输出比 C 方便，没有%格式符<br>输出：<code>print()</code> 已作为 python 的内置函数<br>输入：<code>input()</code></p><p>PS：<code>input()</code> 输入默认为字符串</p><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><ul><li>int</li><li>float</li><li>bool</li><li>str<br>可以使用 <code>type()</code> 查看类型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-built_in">bool</span>(<span class="hljs-number">0</span>) <span class="hljs-comment"># 构造函数，可用于强转</span><br><span class="hljs-built_in">type</span>(a) <span class="hljs-comment"># 输出 bool</span><br><span class="hljs-built_in">print</span>(a) <span class="hljs-comment"># 输出 False</span><br></code></pre></td></tr></table></figure><h3 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h3><p>普通加减乘与 C 一样</p><p>对于两个字符串，可以使用+法进行<strong>字符串拼接</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;123&quot;</span>+<span class="hljs-string">&quot;321&quot;</span> <span class="hljs-comment"># 输出 123321</span><br></code></pre></td></tr></table></figure><p>python 的乘法对于字符串变量有特殊效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&quot;1&quot;</span><br>a*<span class="hljs-number">5</span> <span class="hljs-comment"># 输出：11111</span><br></code></pre></td></tr></table></figure><p>python 的除法有特殊之处：</p><ol><li>普通除 <code>/</code> ，会自动处理精度问题</li><li>地板除 <code>//</code>，效果等同于 C</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">2</span>/<span class="hljs-number">3</span>    <span class="hljs-comment"># 输出：0.66666</span><br><span class="hljs-number">2</span>//<span class="hljs-number">3</span>   <span class="hljs-comment"># 输出：0</span><br></code></pre></td></tr></table></figure><p>还有 <code>&amp; | !</code><br>python 可以写成英文字母</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-literal">True</span> <span class="hljs-keyword">and</span> <span class="hljs-literal">False</span> <span class="hljs-comment"># True &amp; False</span><br><span class="hljs-literal">True</span> <span class="hljs-keyword">or</span> <span class="hljs-literal">False</span> <span class="hljs-comment"># True | False</span><br><span class="hljs-keyword">not</span> <span class="hljs-literal">True</span> <span class="hljs-comment"># !True</span><br></code></pre></td></tr></table></figure><h3 id="三目运算"><a href="#三目运算" class="headerlink" title="三目运算"></a>三目运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1</span> <span class="hljs-keyword">if</span> <span class="hljs-number">1</span>&gt;<span class="hljs-number">2</span> <span class="hljs-keyword">else</span> <span class="hljs-number">2</span> <span class="hljs-comment"># python 的三目运算，1?1&gt;2:2</span><br></code></pre></td></tr></table></figure><h3 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> (n := <span class="hljs-built_in">len</span>(a)) &gt; <span class="hljs-number">10</span>:<br>    <span class="hljs-comment">#do something</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-number">1</span> <span class="hljs-keyword">in</span> a:<br>    <span class="hljs-comment">#do something</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-number">1</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> a:<br>    <br></code></pre></td></tr></table></figure><p><code>:=</code> 是海象运算符<br>上述 <code>if</code> 条件中不能创建变量 n，使用海象运算符就可以进行<strong>创建并赋值</strong></p><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p><strong>while</strong>（常用）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> a &lt; <span class="hljs-number">10</span>:<br>    a += <span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><p><strong>for</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><span class="hljs-comment"># for i in a:  # 从 a 拿一个元素赋值给 i</span><br><span class="hljs-comment">#     print(i)</span><br><span class="hljs-comment"># i</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>    <span class="hljs-built_in">print</span>(a[i])<br><span class="hljs-comment"># list(range(1,7))</span><br><br><span class="hljs-keyword">for</span> i,index <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(a):  <span class="hljs-comment"># i,index 用了拆包语法</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;i:<span class="hljs-subst">&#123;i&#125;</span>,index:<span class="hljs-subst">&#123;index&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># for 语法也有 break else</span><br>a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>    <span class="hljs-built_in">print</span>(i)<br>    <span class="hljs-comment"># break      # break 解释 for 循环</span><br><span class="hljs-keyword">else</span>:   <span class="hljs-comment"># 上面运行完，默认执行一下 else</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;asd&quot;</span>)<br></code></pre></td></tr></table></figure><p>range(5)：产生一个 含有 5 个元素的对象</p><h3 id="全局变量与局部变量"><a href="#全局变量与局部变量" class="headerlink" title="全局变量与局部变量"></a>全局变量与局部变量</h3><p>global</p><p>nonlocal</p><h2 id="高级-特殊语法"><a href="#高级-特殊语法" class="headerlink" title="高级&#x2F;特殊语法"></a>高级&#x2F;特殊语法</h2><h3 id="函数嵌套定义"><a href="#函数嵌套定义" class="headerlink" title="函数嵌套定义"></a>函数嵌套定义</h3><p>即 函数里面可以定义函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>():<br>    a = <span class="hljs-number">123</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>():<br>        <span class="hljs-built_in">print</span>(a)<br>    <span class="hljs-keyword">return</span> func2   <span class="hljs-comment"># 闭包，返回 func2 函数，等于 c 返回函数指针</span><br></code></pre></td></tr></table></figure><h3 id="拆包语法"><a href="#拆包语法" class="headerlink" title="拆包语法"></a>拆包语法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a,b,c=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-built_in">print</span>(a,b,c)    <span class="hljs-comment"># 1,2,3</span><br></code></pre></td></tr></table></figure><ul><li>python 中 <code>...</code> 或 <code>pass</code> 相当于 c 语言的空语句 <code> ;</code></li><li>&#x2F;&#x2F; 地板除</li><li>** 平方乘</li></ul><h3 id="闭包语法"><a href="#闭包语法" class="headerlink" title="闭包语法"></a>闭包语法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>():<br>    a = <span class="hljs-number">123</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>():<br>        <span class="hljs-built_in">print</span>(a)<br>    <span class="hljs-keyword">return</span> func2   <span class="hljs-comment"># 闭包，返回 func2 函数，等于 c 返回函数指针</span><br><br>b = func1()<br>b() <span class="hljs-comment"># 等于运行 func2()</span><br>func1()() <span class="hljs-comment"># 同上</span><br><br><span class="hljs-comment"># func1() 里 a 的值会传给 func2(),func2 赋值给 b</span><br><span class="hljs-comment"># 执行结果</span><br><span class="hljs-comment"># 123</span><br></code></pre></td></tr></table></figure><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><ul><li>try 异常处理<ul><li>try 不能单独存在，必须与 except、else、finally 关键词搭配使用</li><li>python 可以利用 try 异常处理实现 c 语言 goto 语法</li><li>python 有自己一套标准的异常定义，<code>TypeError</code>、<code>ZeroDivisionError</code>等<br>  <a href="https://www.runoob.com/python/python-exceptions.html">菜鸟教程有对这些标准异常的详细介绍</a></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>: <span class="hljs-comment">#捕获异常</span><br>    <span class="hljs-string">&quot;abc&quot;</span>+<span class="hljs-number">123</span> <span class="hljs-comment"># TypeError</span><br>    <span class="hljs-comment"># 1/0       # ZeroDivisionError</span><br><span class="hljs-keyword">except</span>: <span class="hljs-comment"># 异常处理</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;error&quot;</span>)<br><span class="hljs-comment"># except ZeroDivisionError as e: # 捕获指定异常，并取别名为 e</span><br><span class="hljs-comment">#     print(e) # 打印报错的解释</span><br><span class="hljs-comment">#     print(&quot;error&quot;)</span><br><span class="hljs-comment"># except Exception as e: # 捕获所有异常</span><br><span class="hljs-comment">#     print(e) # 打印报错的解释</span><br><span class="hljs-comment">#     print(&quot;error&quot;)</span><br><span class="hljs-comment"># # except (ZeroDivisionError, TypeError): # 捕获多个指定异常</span><br><span class="hljs-comment"># #     print(&quot;error&quot;)</span><br><span class="hljs-comment"># else:   # 如果没有捕获到异常</span><br><span class="hljs-comment">#     print(&quot;靓仔，谋问题！&quot;)</span><br><span class="hljs-keyword">finally</span>: <span class="hljs-comment"># 报不报错最终都会执行，且在报错前执行</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;bye&quot;</span>)<br></code></pre></td></tr></table></figure></li></ul></li></ul><p>除了 try，**assert **在 python 中同样适用，assert 判断后面 True&#x2F;False</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">assert</span> <span class="hljs-number">1</span>==<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="匿名函数-lambda"><a href="#匿名函数-lambda" class="headerlink" title="匿名函数 lambda"></a>匿名函数 lambda</h3><p>用 lambda 定义的函数可以不用取名，适用于只使用一次的场景，取名困难症患者的福音<br>格式：<code>lambda 参数：返回值</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">lambda</span> a : a**a<br><span class="hljs-comment"># 等于</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">a</span>):<br>    <span class="hljs-keyword">return</span> a*a<br>    <br>b = (<span class="hljs-keyword">lambda</span> a : a**a)(<span class="hljs-number">2</span>) <span class="hljs-comment"># lambda a : a**a 就是一个函数</span><br><span class="hljs-comment"># 等于</span><br>b = func(<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><p>装饰器本质是闭包，相当于 A 函数被 B 函数包裹，用 B 装饰 A</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 例如，获取某个函数执行时间</span><br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params">a</span>):<br>    <span class="hljs-built_in">print</span>(a)<br>    time.sleep(<span class="hljs-number">1</span>)  <br><br>t1 = time.time()<br>func1(<span class="hljs-number">1</span>)<br>t2 = time.time()<br>t2-t1<br><br><span class="hljs-comment"># 用装饰器来实现</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_run_time</span>(<span class="hljs-params">fun</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_time</span>():<br>        t1 = time.time()<br>        fun()<br>        t2 = time.time()<br>        <span class="hljs-built_in">print</span>(t2-t1)<br>    <span class="hljs-keyword">return</span> get_time<br><br><span class="hljs-meta">@get_run_time       </span><span class="hljs-comment"># 装饰器用法，在 func1 外面叠加一个函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">123</span>)<br>    time.sleep(<span class="hljs-number">1</span>)<br><br>func1()<br></code></pre></td></tr></table></figure><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>list_iterator</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">a= [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>b=<span class="hljs-built_in">iter</span>(a)   <span class="hljs-comment"># 生成迭代器</span><br><span class="hljs-built_in">type</span>(b)<br><span class="hljs-built_in">next</span>(b)  <span class="hljs-comment">#1</span><br><span class="hljs-built_in">next</span>(b)  <span class="hljs-comment">#2</span><br><span class="hljs-built_in">next</span>(b)  <span class="hljs-comment">#3</span><br><span class="hljs-built_in">next</span>(b)  <span class="hljs-comment">#4</span><br><span class="hljs-comment"># next(b)  #error</span><br></code></pre></td></tr></table></figure><p>python 的 for 语法里面就有迭代器（in 后面的参数）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 如要使 a 所有元素+1</span><br>a= [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br><span class="hljs-keyword">for</span> index,i <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(a):<br>    <span class="hljs-comment"># i = i + 1</span><br>    a[index]+=<span class="hljs-number">1</span><br>a<br><br><span class="hljs-comment"># 上面简单写法</span><br>b = [i+<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a]<br><span class="hljs-comment">## 等效于</span><br><span class="hljs-comment"># b=[]</span><br><span class="hljs-comment"># for i in a:</span><br><span class="hljs-comment">#     b.append(i+1)</span><br>b<br><br><span class="hljs-comment">## 要取部分内容，可以对 a 切片</span><br><span class="hljs-comment"># print(a[1:3])</span><br><span class="hljs-comment"># b = [i+1 for i in a[1:3]]</span><br></code></pre></td></tr></table></figure><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>生成器比迭代器更节省内存</p><p>关键字：yield<br>替代函数里的 return</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">c = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">a</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:         <span class="hljs-comment"># a 的值赋给 i，后面对 i 操作</span><br>        <span class="hljs-keyword">yield</span> i+<span class="hljs-number">1</span>       <span class="hljs-comment"># 第一次运行到这返回后，保存资源，第二次继续从这运行，体现“生成”</span><br>  <br>b = func(c)<br><span class="hljs-built_in">next</span>(b)<br></code></pre></td></tr></table></figure><p>迭代器应用：斐波那契数列的实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 斐波那契数列实现</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fib</span>():<br>    a1,a2 = <span class="hljs-number">0</span>,<span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">yield</span> a1<br>        a1,a2 = a2,a1+a2<br>  <br>a = fib()<br><span class="hljs-keyword">for</span> index,i <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(a):<br>    <span class="hljs-built_in">print</span>(i)<br>    <span class="hljs-keyword">if</span> index == <span class="hljs-number">10</span> :<br>        <span class="hljs-keyword">break</span><br><br>a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]    <span class="hljs-comment"># [] 列表</span><br>(i+<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a) <span class="hljs-comment"># () 变成生成器</span><br></code></pre></td></tr></table></figure><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>标识：<code>&quot; &quot;</code></p><p>python 中 str 类型由容器实现，以 <code>a = &quot;123456789&quot;</code> 为例：</p><p>容器的操作：</p><ul><li>索引，与 C 数组操作一样，支持<strong>负数</strong>索引<ul><li>a[0]，取第 0 位数据，输出 <code>1</code></li><li>a[-1]，取倒数第 1 位</li></ul></li><li>切片，<strong>左包括，右不包括</strong>，必须从小到大<ul><li>a[2:5]，取第 2 到第 4 位的数据，输出 <code>345</code></li><li>a[-5,-2]，取倒数第 5 位到倒数第 3 位，输出 <code>567</code></li><li>a[:5]，取 0 到第 4 位，输出 <code>12345</code></li><li>a[4:]，取第 4 到最后一位，输出 <code>56789</code></li></ul></li><li>使用 <code>len()</code> 获取容器长度，类比 <code>strlen()</code></li></ul><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>标识：<code>[ ]</code><br>容器的索引切片同样适用</p><ul><li>索引：取出来是元素</li><li>切片：切出来还是原来类型</li><li>赋值：可以直接更改列表里元素的值，a[2] &#x3D; 9</li><li><code>+</code> 拼接；<code>*</code> 重复，与字符串一样，不能 <code>-</code></li></ul><p>方法：</p><ul><li>append：新增一个元素，如：[1,2,3] 整个放进去</li><li>extend：新增一串元素，如：[1,2,3] 一个一个取出再放进去</li><li>clear：清空</li><li>copy：拷贝  &#x2F;&#x2F; 区分 c&#x3D;a 和 c&#x3D;a.copy()<br>    * c&#x3D;a 相当于指针操作<br>    * c&#x3D;a.copy() 内存拷贝</li><li>count：计算重复的次数 &#x2F;&#x2F; 不同 len()</li><li>index：从左到右找到元素位置</li><li>insert：插入</li></ul><p><code>del a[0]</code> 删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>]<br>a.append([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])    <span class="hljs-comment"># 1,2,3,4,5,6,7,8,[1,2,3]</span><br>a.extend([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])    <span class="hljs-comment"># 1,2,3,4,5,6,7,8,1,2,3</span><br>a.clear()<br>c = a    <span class="hljs-comment"># 相当于 a 指针操作，后续对 c 操作同样会影响 a</span><br>c = a.copy()    <span class="hljs-comment"># 相当于内存拷贝，c 和 a 各单独一份</span><br>a.count(<span class="hljs-number">4</span>)    <span class="hljs-comment"># 1, 计算 list 中 4 重复的次数</span><br>a.index(<span class="hljs-number">4</span>)    <span class="hljs-comment"># 4, 查找第 index 个元素</span><br>a.insert(<span class="hljs-number">2</span>,[<span class="hljs-number">3</span>,<span class="hljs-number">3</span>])    <br>a    <span class="hljs-comment"># 1,2,[3,3],3,4,5,6,7,8  在第 2 个位置插入 [3,3]</span><br><br><span class="hljs-keyword">del</span> a[<span class="hljs-number">3</span>]   <span class="hljs-comment"># 删除</span><br></code></pre></td></tr></table></figure><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><p>不能修改的 list 列表，相当于加了 const<br>标识：可有可无<code>( )</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span><br>b = <span class="hljs-built_in">list</span>(a)<br><span class="hljs-built_in">type</span>(a)  <span class="hljs-comment"># list，然后就可以通过 list 操作元素了</span><br></code></pre></td></tr></table></figure><h3 id="字典-dict"><a href="#字典-dict" class="headerlink" title="字典 dict"></a>字典 dict</h3><p>标识：<code>&#123;&#125;</code><br><code>&#123;keys:valus&#125;</code></p><p>字典的嵌套使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a&#123;<span class="hljs-string">&quot;key1&quot;</span>:&#123;<span class="hljs-string">&quot;key2&quot;</span>:<span class="hljs-number">123</span>&#125;&#125;<br>a[key1][key2]<br></code></pre></td></tr></table></figure><h3 id="集合-set"><a href="#集合-set" class="headerlink" title="集合 set"></a>集合 set</h3><p>标识：<code>&#123;&#125;</code><br><code>&#123;a,b,c&#125;</code></p><p>特性：</p><ol><li>有限性</li><li>无序性</li><li>唯一性</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">a = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125; <br>b = &#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125; <span class="hljs-comment"># 无序性</span><br>a = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>&#125; <span class="hljs-comment"># 唯一性，可去重</span><br><br>a.add(<span class="hljs-number">4</span>)<br>a.difference(b)<br>a.discard(<span class="hljs-number">1</span>) <span class="hljs-comment"># 删除</span><br>a.intersection(b) <br>a.union(b) <span class="hljs-comment"># 并集不会修改原来的 a</span><br><br>A &amp; B <span class="hljs-comment"># 交集</span><br>A | B <span class="hljs-comment"># 并集</span><br>A - B <span class="hljs-comment"># 差集</span><br>A ^ B <span class="hljs-comment"># 对称差集（在 A 或 B 中，但不会同时出现在 AB 中）</span><br><br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li><code>def func(arg):</code></li><li>支持默认参数 <code>arg=1</code></li><li>支持指定赋值参数 </li><li>支持返回多个值 <code>return a,b,c</code></li><li>函数重载</li><li>可以指定传入参数类型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">a:<span class="hljs-built_in">int</span></span>):    <span class="hljs-comment"># 告诉 python 传入的是 int 类型，但不限定是 int，期望、描述，你可以叛逆传入字符串等</span><br>    ...<br></code></pre></td></tr></table></figure><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><p><code>f = open(&quot;路径/文件名&quot;,&quot;权限&quot;)</code></p><p>权限：</p><table><thead><tr><th align="center">—–</th><th align="center">—–</th><th align="center">—–</th><th align="center">—–</th></tr></thead><tbody><tr><td align="center">w</td><td align="center">打开只写文件</td><td align="center">w+</td><td align="center">打开可读写文件</td></tr><tr><td align="center">r</td><td align="center">打开只读文件</td><td align="center">r+</td><td align="center">打开可读写文件</td></tr><tr><td align="center">a</td><td align="center">追加打开只写文件</td><td align="center">a+</td><td align="center">追加打开可读写文件</td></tr><tr><td align="center">-b</td><td align="center">以二进制方式操作</td><td align="center"></td><td align="center"></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 读</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>)<br>f.write(<span class="hljs-string">&quot;hello world&quot;</span>)<br>f.close()<br><br><span class="hljs-comment"># 写</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br>txt = f.read()<br>f.close()<br>txt<br><br><span class="hljs-comment"># 追加</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>)<br>f.write(<span class="hljs-string">&quot;hello world&quot;</span>)<br>f.close()<br>txt<br><br><span class="hljs-comment"># 上面的等效替代</span><br><span class="hljs-comment"># 这种写法无需考虑 close，不用担心没有 close 文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    txt = f.read()<br><span class="hljs-built_in">print</span>(txt)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;hello.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> d:<br>    d.write(txt)<br></code></pre></td></tr></table></figure><p>后一种写法使用更方便，更安全<br>可以指定以某种编码方式打开文件，如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;1.html&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(res.text)<br></code></pre></td></tr></table></figure><h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><p>对象是<strong>类的具象</strong>：</p><ul><li>对象是人要进行研究的具体事物</li><li>对象不仅能表示事物，还能表示抽象的规则、计划、事件</li><li>对象有属性（状态），我们用变量（value）来描述</li><li>对象有方法（行为），我们用函数（func）来描述</li></ul><p>类是<strong>对象的抽象</strong>：</p><ul><li>类是具有相同<strong>特性</strong>和<strong>行为</strong>的对象的概括、总结</li><li>类的<strong>属性和方法</strong>是对对象的<strong>状态和行为</strong>的抽象</li></ul><p>关系：<br>类的实例化的结果就是对象<br>对象抽象化的结果就是类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">people</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>): <span class="hljs-comment"># class 的构造函数，在 class 创建对象时默认调用</span><br>        self.name = name<br>        self.food = <span class="hljs-string">&quot;没吃&quot;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;创建了<span class="hljs-subst">&#123;self.name&#125;</span>&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__del__</span>(<span class="hljs-params">self</span>): <span class="hljs-comment"># 析构函数，在对象删除时调用，用得不多</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;del&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self, food</span>): <span class="hljs-comment"># class 里所有 func 第一个参数需要传 self</span><br>        self.food = food<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.name&#125;</span>吃了一个<span class="hljs-subst">&#123;food&#125;</span>&quot;</span>)<br>  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;今天吃了<span class="hljs-subst">&#123;self.food&#125;</span>&quot;</span>)<br>  <br>person = people(<span class="hljs-string">&quot;张三&quot;</span>) <span class="hljs-comment"># 类创建对象的参数默认传给__init__函数</span><br><span class="hljs-comment"># person.__dir__() # 返回对象所有方法</span><br><span class="hljs-comment"># person.eat(&quot;apple&quot;)</span><br>person.get_eat()<br><span class="hljs-keyword">del</span> person <span class="hljs-comment"># 使用 del 删除对象</span><br><span class="hljs-keyword">del</span> person.name <span class="hljs-comment"># 使用 del 删除对象的属性</span><br></code></pre></td></tr></table></figure><ul><li><strong>类里面的 func 第一个参数必须传 self</strong>，self 参数是对类的当前实例的引用</li><li>类定义不能为空，可以使用 pass 语句避免错误</li></ul><h2 id="库"><a href="#库" class="headerlink" title="库"></a>库</h2><p>使用库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os <span class="hljs-comment"># 普通导入</span><br><span class="hljs-keyword">import</span> os <span class="hljs-keyword">as</span> o  <span class="hljs-comment"># 导入 os 库并重命名为 o</span><br><br><span class="hljs-keyword">import</span> os.path <span class="hljs-comment">#导入 os 库里的 path 子模块</span><br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> path <span class="hljs-comment">#效果同上，但上面的调用需要 os.path, 这个可以直接 path</span><br></code></pre></td></tr></table></figure><ul><li>os：系统库</li><li>shutil：os 库补充，专门用来操作文件</li><li>requests：网络相关的</li></ul><p><strong>可使用 <code>help()</code> 查看库或函数的帮助文档</strong>：<code>help(os.path)</code></p><h3 id="json-库"><a href="#json-库" class="headerlink" title="json 库"></a>json 库</h3><p><strong>字符串</strong></p><ul><li><code>json.dumps()</code>：编码</li><li><code>json.loads()</code>：解码<br><img src="https://c1ns.cn/EqrgV"><br><img src="https://raw.githubusercontent.com/24849748/PicBed/main/ob/202306041840649.png" alt="image.png|460"></li></ul><p>python json 类型对应表<br>编码：</p><table><thead><tr><th align="center">Python</th><th align="center">JSON</th></tr></thead><tbody><tr><td align="center">dict</td><td align="center">object</td></tr><tr><td align="center">list,tuple</td><td align="center">array</td></tr><tr><td align="center">str</td><td align="center">string</td></tr><tr><td align="center">int,float…</td><td align="center">number</td></tr><tr><td align="center">True</td><td align="center">true</td></tr><tr><td align="center">False</td><td align="center">false</td></tr><tr><td align="center">None</td><td align="center">null</td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center">解码：（不同）</td><td align="center"></td></tr><tr><td align="center">JSON</td><td align="center">Python</td></tr><tr><td align="center">————-</td><td align="center">——</td></tr><tr><td align="center">array</td><td align="center">list</td></tr><tr><td align="center">number(int)</td><td align="center">int</td></tr><tr><td align="center">number(float)</td><td align="center">float</td></tr></tbody></table><p><strong>文件</strong></p><ul><li><code>json.dump()</code>：编码</li><li><code>json.load()</code>：解码</li></ul>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mermaid 语法学习</title>
      <link href="/tools/Mermaid%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
      <url>/tools/Mermaid%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="Mermaid-介绍"><a href="#Mermaid-介绍" class="headerlink" title="Mermaid 介绍"></a>Mermaid 介绍</h2><ul><li>基于 Javascript 的绘图工具</li><li>Typora 支持渲染 Mermaid 语法</li><li>使用 markdown 代码块编写，并选择语言 <code>mermaid</code>，如果工具支持即可渲染</li></ul><h2 id="Mermaid-绘制流程图"><a href="#Mermaid-绘制流程图" class="headerlink" title="Mermaid 绘制流程图"></a>Mermaid 绘制流程图</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><ul><li><code>id[description]</code><br>id 就是一个节点，后面是此 id 的描述文本<blockquote><p>通常只用 id，不想写 description</p></blockquote></li></ul><h4 id="图表显示方向"><a href="#图表显示方向" class="headerlink" title="图表显示方向"></a>图表显示方向</h4><p><code>graph &lt;dir&gt;</code></p><ul><li>TB (Top to Bottom)</li><li>BT (Bottom to Top)</li><li>LR (Left to Right)</li><li>RL (Right to Left)</li></ul><h4 id="节点形状"><a href="#节点形状" class="headerlink" title="节点形状"></a>节点形状</h4><ul><li>矩形：<code>[]</code></li><li>长方形带圆角：<code>()</code></li><li>长圆形：<code>([])</code></li><li>圆形：<code>(())</code></li><li>圆柱：<code>[()]</code></li><li>菱形：<code>&#123;&#125;</code></li><li>六角形：<code>&#123;&#123;&#125;&#125;</code></li><li>平行四边形：<code>[/ /]</code> or <code>[\ \]</code></li></ul><blockquote><p>如果文本里带 <code>()</code> 等符号，使用 <code>&quot;&quot;</code> 将文本包裹起来。</p></blockquote><h4 id="连线"><a href="#连线" class="headerlink" title="连线"></a>连线</h4><ul><li>实线：<code>--</code></li><li>虚线：<code>-.</code></li><li>带箭头：<code>&gt;</code></li><li>实线有描述：<code>--description--</code> or <code>--|description|</code></li><li>加粗实线：<code>==</code></li></ul><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><ul><li>使用 <code>%%</code> 行注释</li></ul><h2 id="实战举例"><a href="#实战举例" class="headerlink" title="实战举例"></a>实战举例</h2><h3 id="单个节点连接多个节点"><a href="#单个节点连接多个节点" class="headerlink" title="单个节点连接多个节点"></a>单个节点连接多个节点</h3><pre><code class=" mermaid">graph LR    a --&gt; b &amp; c --&gt; d</code></pre><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><pre><code class=" mermaid">graph 注册开始 --&gt; 发送广播帧发送广播帧 --超时--&gt; 没回应 --&gt; 注册结束发送广播帧 --&gt; 有回应有回应 --没冲突--&gt; 设备表 --&gt; 分类完成有回应 --有冲突--&gt; 冲突链表 --&gt; 分类完成分类完成 --注册下一类型--&gt; 发送广播帧</code></pre><h3 id="流程图嵌套"><a href="#流程图嵌套" class="headerlink" title="流程图嵌套"></a>流程图嵌套</h3><pre><code class=" mermaid">graph TB    c1--&gt;a2    subgraph one    a1--&gt;a2    end    subgraph two    b1--&gt;b2    end    subgraph three    c1--&gt;c2    end</code></pre><h3 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h3><pre><code class=" mermaid">sequenceDiagram    键盘 --&gt;&gt; 键盘线程 : 发送重新注册请求    %%键盘线程 -&gt;&gt; + bus1 : 删除    键盘线程 -&gt;&gt; bus1 : 删除    loop 注册    键盘线程 -&gt;&gt; 键盘线程 : bus1、bus2 设备先后注册    end    %%bus1 -&gt;&gt; - 键盘线程 : 重新创建    键盘线程 -&gt;&gt; bus1  : 重新创建    键盘线程 --&gt;&gt; 键盘 : 发送已注册的设备信息</code></pre><h3 id="状态图"><a href="#状态图" class="headerlink" title="状态图"></a>状态图</h3><pre><code class=" mermaid">stateDiagram[*] --&gt; 暂停    暂停 --&gt; 播放    暂停 --&gt; 停止    播放 --&gt; 暂停    播放 --&gt; 停止    停止 --&gt; [*] </code></pre><h2 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h2><blockquote><p><a href="https://snowdreams1006.github.io/write/mermaid-flow-chart.html">快速上手 mermadi 流程图</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mermaid </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
